{
  "version": 3,
  "file": "bbui.js",
  "sources": [
    "src/core.js",
    "src/module.js",
    "src/shellservice.js",
    "src/uimodelingservice.js"
  ],
  "names": [],
  "mappingstelm
  "sourceRoot": "../..",
  "sourcesContent": [
    "/*global angular */\n\n// Declare the one global variable under which all other BBUI components will reside.\n(function () {\n    \"use strict\";\n\n    angular.module('bbui.core', [])\n        .factory('bbui', ['$window', function ($window) {\n            var BBUI,\n                // JSLint chokes on this regular expression if a literal is used.\n                escapeRegExpRegEx = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\\\\\$\\\\^]\", \"g\"),\n                euc = $window.encodeURIComponent,\n                TYPE_STRING = \"string\";\n\n            function objEquals(value1, value2, ignoreCase) {\n                if (value1 === value2) {\n                    return true;\n                }\n\n                if (ignoreCase && typeof value1 === TYPE_STRING && typeof value2 === TYPE_STRING) {\n                    return value1.toUpperCase() === value2.toUpperCase();\n                }\n\n                return false;\n            }\n\n            /**\n             * @class bbui\n             * Contains methods for issuing XMLHttpReqests as well as some basic helper functions.\n             * @singleton\n             */\n            BBUI = {\n\n                /**\n                 * @readonly\n                 * Represents an empty GUID value.\n                 * @type {String}\n                 */\n                emptyGuid: \"00000000-0000-0000-0000-000000000000\",\n\n                /**\n                 * Returns a flag indicating the given object is defined and its value is not null.   This function is mainly\n                 * used to see if a JSON property is present, since the absense of a property usually means \"no change\" rather\n                 * than \"this property's value was changed to null.\"\n                 * <br/><br/>\n                 * Calling this function is equivalent to evaluating <tt>typeof obj !== \"undefined\" && obj !== null</tt>.\n                 *\n                 * @param {Object} obj\n                 * The object to check.\n                 *\n                 * @return {Boolean}\n                 * False if the object is null or undefined; otherwise, true.\n                 */\n                is: function (obj) {\n                    return typeof obj !== \"undefined\" && obj !== null;\n                },\n\n                /**\n                 * Finds an item in an array with the specified property value.\n                 *\n                 * @param {Array} items\n                 * The array to search.\n                 *\n                 * @param {String} propName\n                 * The property's name.\n                 *\n                 * @param {Object} value\n                 * The property's value.\n                 *\n                 * @param {Boolean} [ignorePropCase=false]\n                 * Does a case-insensitive search on the property's name.\n                 *\n                 * @param {Boolean} [ignoreValueCase=false]\n                 * Does a case-insensitive search on the property's value.\n                 *\n                 * @return {Object}\n                 * The first item in the array that matches the property value (or null if no matching item is found).\n                 */\n                findByProp: function (items, propName, value, ignorePropCase, ignoreValueCase) {\n\n                    var i,\n                        item,\n                        propValue;\n\n                    if (items) {\n                        i = items.length || 0;\n                        while (i--) {\n                            item = items[i];\n\n                            if (item) {\n                                propValue = BBUI.getPropValue(item, propName, ignorePropCase);\n                                if (objEquals(propValue, value, ignoreValueCase)) {\n                                    return item;\n                                }\n                            }\n                        }\n                    }\n\n                    return null;\n                },\n\n                /**\n                 * Gets an object's property value using a case-insensitive comparison if specified.\n                 *\n                 * @param {Object} obj\n                 * The object containing the property.\n                 *\n                 * @param {String} propName\n                 * The name of the property.\n                 *\n                 * @param {Boolean} [ignoreCase]\n                 * Indicates whether to ignore case on the property.\n                 *\n                 * @param {Object} [defaultValue]\n                 * The default value to return if the property does not exist.\n                 *\n                 * @return {Object}\n                 */\n                getPropValue: function (obj, propName, ignoreCase, defaultValue) {\n\n                    var p,\n                        propNameUpper;\n\n                    if (obj && propName) {\n                        if (typeof obj[propName] !== \"undefined\") {\n                            return obj[propName];\n                        }\n\n                        if (ignoreCase) {\n                            propNameUpper = propName.toUpperCase();\n                            for (p in obj) {\n                                /*jslint forin: true */\n                                if (p.toUpperCase() === propNameUpper) {\n                                    return obj[p];\n                                }\n                            }\n                        }\n                    }\n\n                    return defaultValue;\n                },\n\n                /**\n                 * Copies the properties of the specified object to a new object and returns the new object.\n                 *\n                 * @param {Object} obj\n                 * Object to clone.\n                 *\n                 * @return {Object}\n                 * The cloned object.\n                 */\n                clone: function (obj) {\n\n                    var cloneObj,\n                        p;\n\n                    if (typeof obj !== \"undefined\") {\n                        if (obj === null) {\n                            return null;\n                        }\n                        cloneObj = {};\n                        for (p in obj) {\n                            if (obj.hasOwnProperty(p)) {\n                                cloneObj[p] = obj[p];\n                            }\n                        }\n                    }\n\n                    return cloneObj;\n                },\n\n                /**\n                 * Copy properties from one object onto another.\n                 *\n                 * @param {Object} to\n                 * @param {Object} from\n                 */\n                copyProps: function (to, from) {\n                    var p;\n\n                    if (from) {\n                        for (p in from) {\n                            if (from.hasOwnProperty(p)) {\n                                to[p] = from[p];\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Compares two GUID values by normalizing capitalization of each GUID and comparing them as strings.\n                 *\n                 * @param {String} guid1\n                 * The first GUID to compare.\n                 *\n                 * @param {String} guid2\n                 * The second GUID to compare.\n                 *\n                 * @param {String} [guid1Upper]\n                 * A flag indicating the first GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                 * first GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\n                 *\n                 * @param {String} [guid2Upper]\n                 * A flag indicating the second GUID is already upper-cased.  When true, a new upper-cased string is not created for the\n                 * second GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\n                 *\n                 * @return {Boolean}\n                 * A flag indicating whether the two GUIDs are the same.\n                 */\n                guidEquals: function (guid1, guid2, guid1Upper, guid2Upper) {\n\n                    if (typeof guid1 !== TYPE_STRING || typeof guid2 !== TYPE_STRING) {\n                        return false;\n                    }\n\n                    if (!guid1Upper) {\n                        guid1 = guid1.toUpperCase();\n                    }\n\n                    if (!guid2Upper) {\n                        guid2 = guid2.toUpperCase();\n                    }\n\n                    return guid1 === guid2;\n                },\n\n                /**\n                 * Parses the provided object name and returns a reference to the object it represents.\n                 *\n                 * @param {String} objName\n                 * The name of the object.\n                 *\n                 * @return {Object}\n                 * The corresponding object, or null if any part of the object is undefined.\n                 */\n                getObjByName: function (objName) {\n\n                    var i,\n                        n,\n                        obj,\n                        parts,\n                        part;\n\n                    // Split the object name on the period, then loop through the parts, building up a reference to the\n                    // object.  This essentially turns a string like \"BBUI.globals.myFunctionName\" into the object\n                    // window[\"BBUI\"][\"globals\"][\"myFunctionName\"].\n                    parts = objName.split(\".\");\n\n                    // Start with the window object.\n                    obj = $window;\n\n                    for (i = 0, n = parts.length; i < n; i++) {\n                        part = parts[i];\n                        if (!(i === 0 && part === \"window\")) {\n                            obj = obj[part];\n                            if (typeof obj === \"undefined\") {\n                                return null;\n                            }\n                        }\n                    }\n\n                    return obj;\n                },\n\n                /**\n                 * Concatenates all the provided arguments as if they were portions of a URL, inserting forward slashes where appropriate.\n                 * @param {String} arg1 A portion of the URL.\n                 * @param {String} [arg2]\n                 * @param {String} [argN]\n                 *\n                 * @return {String} The concatenated URL.\n                 */\n                urlConcat: function (arg1) {\n\n                    var arg,\n                        argCount,\n                        argObj,\n                        i,\n                        url;\n\n                    argCount = arguments.length;\n\n                    if (argCount) {\n                        if (!BBUI.is(arg1)) {\n                            return null;\n                        }\n\n                        url = arg1.toString();\n\n                        for (i = 1; i < argCount; i++) {\n                            argObj = arguments[i];\n\n                            if (!BBUI.is(argObj)) {\n                                return null;\n                            }\n\n                            arg = argObj.toString();\n\n                            if (url.charAt(url.length - 1) !== \"/\" && arg.charAt(0) !== \"/\") {\n                                url += \"/\";\n                            }\n\n                            url += arg;\n                        }\n\n                        return url;\n                    }\n\n                    return null;\n                },\n\n                /**\n                 * Takes the special arguments object from a function and returns the arguments in a true array.\n                 *\n                 * @param {Object} args\n                 * The arguments object.\n                 *\n                 * @param {Number} [start]\n                 * The index of the first item to return.  When not specified, all the items are returned.\n                 *\n                 * @return {Object[]}\n                 * The array of arguments.\n                 */\n                argsToArray: function (args, start) {\n                    return Array.prototype.slice.call(args, start || 0);\n                },\n\n                /**\n                 * Takes an array of objects with an \"id\" or \"name\" property and a \"value\" property and returns\n                 * the items as a query string.\n                 *\n                 * @param {Object[]} items\n                 * The array of objects.\n                 *\n                 * @param {String} [itemPrefix]\n                 * The string to prepend to the query string item name.\n                 *\n                 * @param {Boolean} [prependAmpersand]\n                 * Flag indicating whether to prepend an ampersand to the returned query string.\n                 *\n                 * @return {String}\n                 * The query string.\n                 */\n                arrayToQueryString: function (items, itemPrefix, prependAmpersand) {\n\n                    var i,\n                        item,\n                        n,\n                        s;\n\n                    s = \"\";\n\n                    if (items && items.length) {\n                        itemPrefix = itemPrefix || \"\";\n\n                        for (i = 0, n = items.length; i < n; i++) {\n                            item = items[i];\n\n                            if (i > 0 || prependAmpersand) {\n                                s += \"&\";\n                            }\n\n                            s += itemPrefix + euc(item.id || item.name) + \"=\" + euc(item.value);\n                        }\n                    }\n\n                    return s;\n                },\n\n                /**\n                 * @return {String}\n                 */\n                getAbsoluteBaseUrl: function (relativeBaseUrl) {\n                    var baseUrl,\n                        i,\n                        serverPartsCount;\n\n                    if (!relativeBaseUrl) {\n                        return relativeBaseUrl;\n                    }\n\n                    serverPartsCount = relativeBaseUrl.split(\"/\").length;\n\n                    // NOTE: The base URL value used to be passed as a relative URL down from the server, but this caused problems\n                    // with mixed content warnings in IE8 when a URL on a DOM element (such as an href attribute on a LINK element\n                    // or a background-image CSS rule on a DIV element) was specified and then created and not added to the page or\n                    // removed from the page and then garbage collected.  This is due to a bug in IE8 where the protocol of \"about:\"\n                    // is assumed rather than the protocol specified on the current web page.  Changing the base URL to an absolute\n                    // URL by removing a known part of the URL here fixes this issue.  More information on the bug in IE that causes\n                    // the mixed content warning can be found here:\n                    // http://support.microsoft.com/kb/925014\n                    // http://www.pelagodesign.com/blog/2007/10/30/ie7-removechild-and-ssl/\n                    // http://blog.httpwatch.com/2009/09/17/even-more-problems-with-the-ie-8-mixed-content-warning/#comment-10632\n                    // http://blogs.msdn.com/b/ieinternals/archive/2009/06/22/https-mixed-content-in-ie8.aspx?PageIndex=3#comments\n\n                    // Also, a utility called \"Scriptfree\" was instrumental in tracking this bug down.  This was mentioned in a\n                    // comment on the IEInternals blog post above.\n                    // http://www.enhanceie.com/dl/scriptfreesetup.exe\n\n                    // Remove the query string since it's not relevant.\n                    baseUrl = $window.location.href.split(\"?\")[0];\n\n                    for (i = 0; i < serverPartsCount + 1; i++) {\n                        baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf(\"/\"));\n                    }\n\n                    return baseUrl;\n                },\n\n                /**\n                 * Detemines whether the value of the first parameter ends with the value of the second parameter.\n                 *\n                 * @param {String} s\n                 * The value to search.\n                 *\n                 * @param {String} val\n                 * The value to find.\n                 *\n                 * @return {Boolean}\n                 * A flag indicating whether the value of the first parameter ends with the value of the second parameter.\n                 */\n                endsWith: function (s, val) {\n                    var pos;\n\n                    if (typeof s === TYPE_STRING && typeof val === TYPE_STRING) {\n                        pos = s.length - val.length;\n                        return pos >= 0 && s.lastIndexOf(val) === pos;\n                    }\n\n                    return false;\n                },\n\n                /**\n                 * Overrides functions on the first argument with properties from the second argument and returns an object\n                 * with the original base functions.\n                 *\n                 * @param {Object} to\n                 * The object whose functions are to be overridden.\n                 *\n                 * @param {Object} from\n                 * The Object containing the override functions.\n                 *\n                 * @return {Object}\n                 * The object containing the original functions.\n                 */\n                override: function (to, from) {\n                    var base,\n                        overridden,\n                        p;\n\n                    base = {};\n\n                    for (p in from) {\n                        if (from.hasOwnProperty(p)) {\n                            overridden = to[p];\n\n                            if (overridden) {\n                                base[p] = overridden;\n                            }\n\n                            to[p] = from[p];\n                        }\n                    }\n\n                    return base;\n                },\n\n                /**\n                 * @return {String}\n                 */\n                escapeRegExp: function (filter) {\n                    if (typeof filter === TYPE_STRING) {\n                        return filter.replace(escapeRegExpRegEx, '\\\\$&');\n                    }\n\n                    return null;\n                }\n\n            };\n\n            return BBUI;\n\n        }]);\n\n}());\n",
    "/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('bbui', ['bbui.core', 'bbui.shellservice', 'bbui.uimodelingservice']);\n\n}());",
    "/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('bbui.shellservice', ['bbui.core'])\n        /**\n         * @class bbui.shellservice.bbuiShellServiceConfig\n         */\n        .constant('bbuiShellServiceConfig', {\n            /**\n             * @cfg {String} baseUrl\n             */\n            baseUrl: null,\n            /**\n             * @cfg {String} databaseName\n             */\n            databaseName: null\n        })\n        .factory('bbuiShellService', ['$http', 'bbui', 'bbuiShellServiceConfig', function ($http, BBUI, bbuiShellServiceConfig) {\n            var Service;\n\n            (function () {\n                // Shorter alias for commonly-used function.\n                var euc = encodeURIComponent,\n                    paramPrefix = \"p_\";\n\n                function pushIf(sb, qsVarName, value, condition) {\n                    if (typeof condition === \"undefined\") {\n                        condition = !!value;\n                    }\n\n                    if (condition) {\n                        sb.push(\"&\" + qsVarName + \"=\");\n                        sb.push(euc(value));\n                    }\n                }\n\n                function buildBaseUrl(svc, fileName, action, pageId, tabId, sectionId, actionId, contextRecordId) {\n                    var sb;\n\n                    sb = [];\n\n                    if (svc.proxyUrl) {\n                        sb.push(svc.proxyUrl +\n                            (svc.proxyUrl.indexOf(\"?\") >= 0 ? \"&\" : \"?\") +\n                            \"fileName=\" +\n                            euc(fileName) +\n                            \"&\");\n                    } else {\n                        sb.push(BBUI.urlConcat(svc.baseUrl, \"webui/\" + fileName + \"?\"));\n                    }\n\n                    sb.push(\"databaseName=\" + euc(svc.databaseName));\n\n                    pushIf(sb, \"runAs\", svc.runAs);\n\n                    pushIf(sb, \"action\", action);\n                    pushIf(sb, \"pageId\", pageId);\n                    pushIf(sb, \"tabId\", tabId);\n                    pushIf(sb, \"sectionId\", sectionId);\n                    pushIf(sb, \"actionId\", actionId);\n                    pushIf(sb, \"contextRecordId\", contextRecordId);\n\n                    return sb.join(\"\");\n                }\n\n                function buildSvcBaseUrl(svc, action, pageId, tabId, sectionId, actionId, contextRecordId) {\n                    return buildBaseUrl(svc, \"WebShellService.ashx\", action, pageId, tabId, sectionId, actionId, contextRecordId);\n                }\n\n                function buildAdHocQuerySvcBaseUrl(svc) {\n                    return buildBaseUrl(svc, \"WebShellAdHocQueryService.ashx\");\n                }\n\n                function buildDataListSvcBaseUrl(svc, dataListId, pageId, tabId, sectionId) {\n                    var url;\n\n                    url = buildBaseUrl(svc, \"WebShellDataListService.ashx\", null, pageId, tabId, sectionId) +\n                        \"&dataListId=\" +\n                        euc(dataListId);\n\n                    return url;\n                }\n\n                function buildSearchListSvcBaseUrl(svc, searchListId, criteria) {\n                    return buildBaseUrl(svc, \"WebShellSearchListService.ashx\") +\n                        \"&searchListId=\" +\n                        euc(searchListId) +\n                        \"&criteria=\" +\n                        euc(criteria);\n                }\n\n                function addSecurityContext(url, options) {\n                    if (options) {\n                        if (options.securityContextFeatureId) {\n                            url += \"&securityContextFeatureId=\" + euc(options.securityContextFeatureId);\n                        }\n\n                        if (BBUI.is(options.securityContextFeatureType)) {\n                            url += \"&securityContextFeatureType=\" + euc(options.securityContextFeatureType);\n                        }\n                    }\n\n                    return url;\n                }\n\n                function getHeaders(svc) {\n                    var headers;\n\n                    headers = {};\n\n                    BBUI.copyProps(headers, bbuiShellServiceConfig.globalHttpHeaders);\n                    BBUI.copyProps(headers, svc.httpHeaders);\n\n                    return headers;\n                }\n\n                function doRequest(svc, method, url, data) {\n                    return svc.$http({\n                        method: method,\n                        url: url,\n                        data: data,\n                        headers: getHeaders(svc),\n                        cache: false\n                    });\n                }\n\n                function doGet(svc, url) {\n                    return svc.doGet(url);\n                }\n\n                function doPost(svc, url, data) {\n                    return svc.doPost(url, data);\n                }\n\n                /**\n                 * @class bbui.shellservice.bbuiShellService.Service\n                 * Provides various methods for communicating with the web shell endpoints on the web server.\n                 * <br/><br/>\n                 * Note that all methods that make a call to the web server have the same last three arguments:\n                 *\n                 * @param {String} baseUrl\n                 * The base URL to the web server.\n                 *\n                 * @param {String} databaseName\n                 * The name of the database to which to connect.\n                 *\n                 * @param {Object} [options]\n                 *\n                 * @param {String} options.proxyUrl\n                 * A URL to a web server that acts as a proxy between the client and the AppFx web server.\n                 * This is useful in cases where the host page is hosted on a server other than the AppFx web server\n                 * and the browser would otherwise block the request for being a cross-site request.\n                 *\n                 * @param {String} options.runAs\n                 *\n                 * @param {Object} options.onRequestBegin\n                 *\n                 * @param {Object} options.onRequestEnd\n                 *\n                 * @param {Object} options.httpHeaders\n                 *\n                 */\n                Service = function (baseUrl, databaseName, options) {\n\n                    var svc;\n\n                    svc = this;\n\n                    svc.baseUrl = baseUrl;\n                    svc.databaseName = databaseName;\n\n                    if (options) {\n                        svc.runAs = options.runAs;\n                        svc.onRequestBegin = options.onRequestBegin;\n                        svc.onRequestEnd = options.onRequestEnd;\n                        svc.httpHeaders = options.httpHeaders;\n                        svc.proxyUrl = options.proxyUrl;\n                    }\n                };\n\n                Service.prototype = {\n\n                    /**\n                     * @readonly\n                     * The base URL to the web server.\n                     * @property baseUrl\n                     * @type String\n                     */\n                    baseUrl: null,\n\n                    /**\n                     * @readonly\n                     * The name of the database to which to connect.\n                     * @property databaseName\n                     * @type String\n                     */\n                    databaseName: null,\n\n                    /**\n                     * @private\n                     * Validates a user name and password for a given user.\n                     *\n                     * @param {Object} loginInfo An object with username and password properties.\n                     *\n                     * @return {promise}\n                     */\n                    login: function (loginInfo) {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=login\";\n\n                        return doPost(this, url, loginInfo);\n                    },\n\n                    /**\n                     * @private\n                     * Removes the session cookie that keeps the user logged in.\n                     *\n                     * @return {promise}\n                     */\n                    logout: function () {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=logout\";\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @private\n                     * Requests a password reset link and emails it to the associated user.\n                     *\n                     * @param {Object} emailAddress\n                     * The user's email address.\n                     *\n                     * @return {promise}\n                     */\n                    sendPasswordResetLink: function (emailAddress) {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=sendPasswordResetLink&emailAddress=\" + emailAddress;\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @private\n                     * Resets the user's password.\n                     *\n                     * @param {Object} request\n                     * An object containing token and newPassword properties.\n                     *\n                     * @return {promise}\n                     */\n                    resetPassword: function (request) {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=resetPassword\";\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @private\n                     * Starts the user's session and returns navigation information for web shell.\n                     *\n                     * @return {promise}\n                     */\n                    sessionStart: function () {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"sessionStart\");\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the site-wide navigation information for web shell.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {Boolean} options.refreshCache\n                     *\n                     * @return {promise}\n                     */\n                    getNavigation: function (options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getNavigation\");\n\n                        if (options.refreshCache) {\n                            url += \"&refreshCache=true\";\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the specified page's metadata.\n                     *\n                     * @param {String} pageId\n                     * The ID of the page.\n                     *\n                     * @param {String} [recordId]\n                     * The ID of the record to be shown by the page.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {Boolean} options.firstTab\n                     * Indicates that the first visible tab's full metadata should be returned.  Only the caption for other tabs will be returned.\n                     *\n                     * @param {String} options.tabId\n                     * The ID of the tab whose full metadata should be returned.  Only the caption for other tabs will be returned.\n                     *\n                     * @param {String} options.listBuilderInstanceId\n                     *\n                     * @return {promise}\n                     */\n                    getPage: function (pageId, recordId, options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = buildSvcBaseUrl(this, \"getPage\", pageId, options.tabId, null, null, recordId);\n\n                        if (options.firstTab) {\n                            url += \"&firstTab=true\";\n                        }\n                        if (options.listBuilderInstanceId) {\n                            url += \"&listBuilderInstanceId=\" + euc(options.listBuilderInstanceId);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                    * @private\n                    * Gets the specified page's metadata.\n                    *\n                    * @param {String} pageId\n                    * The ID of the page.\n                    *\n                    * @return {promise}\n                    */\n                    getPageIsCustomizable: function (pageId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageIsCustomizable\", pageId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the specified page tab's metadata.\n                     *\n                     * @param {String} pageId\n                     * The ID of the page.\n                     *\n                     * @param {String} tabId The ID of the tab.\n                     * @param {String} recordId The ID of the record to be shown by the page.\n                     *\n                     * @return {promise}\n                     */\n                    getPageTab: function (pageId, tabId, recordId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageTab\", pageId, tabId, null, null, recordId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Builds a page on the server according to the specified report and returns that page's metadata.\n                     *\n                     * @param {String} reportId The ID of the report.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {String} options.historyId\n                     *\n                     * @param {String} options.caption\n                     *\n                     * @param {String} options.displayPromptArea\n                     *\n                     * @param {Object[]} options.parameters\n                     *\n                     * @return {promise}\n                     */\n                    getReportPage: function (reportId, options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = buildSvcBaseUrl(this, \"getReportPage\") +\n                            \"&reportId=\" + euc(reportId);\n\n                        if (options.historyId) {\n                            url += \"&historyId=\" + euc(options.historyId);\n                        }\n\n                        if (options.caption) {\n                            url += \"&caption=\" + euc(options.caption);\n                        }\n\n                        if (options.displayPromptArea) {\n                            url += \"&displayPromptArea=\" + euc(options.displayPromptArea);\n                        }\n\n                        url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\n\n                        return doGet(this, url, options);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the action metadata for a functional area's task.\n                     *\n                     * @param {String} functionalAreaId\n                     * The ID of the functional area.\n                     *\n                     * @param {String} taskId\n                     * The ID of the functional area's task.\n                     *\n                     * @return {promise}\n                     */\n                    getFunctionalAreaTaskAction: function (functionalAreaId, taskId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getFunctionalAreaTaskAction\");\n\n                        if (functionalAreaId) {\n                            url += \"&functionalAreaId=\" + euc(functionalAreaId);\n                        }\n\n                        if (taskId) {\n                            url += \"&taskId=\" + euc(taskId);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Returns a task as the variable reply for the callback\n                     *\n                     * @param {String} taskId\n                     * The ID of the task.\n                     *\n                     * @return {promise}\n                     */\n                    getTaskAction: function (taskId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getTaskAction\");\n\n                        if (taskId) {\n                            url += \"&taskId=\" + euc(taskId);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the metadata for a page-level action.\n                     *\n                     * @param {String} pageId\n                     * The ID of the page.\n                     *\n                     * @param {String} actionId\n                     * The ID of the page's action.\n                     *\n                     * @param {String} contextRecordId\n                     *\n                     * @return {promise}\n                     */\n                    getPageAction: function (pageId, actionId, contextRecordId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageAction\", pageId, null, null, actionId, contextRecordId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @private\n                     * Gets the metadata for a page section.\n                     *\n                     * @param {String} pageId\n                     * The ID of the page.\n                     *\n                     * @param {String} tabId\n                     * The ID of the tab to which the section belongs.\n                     *\n                     * @param {String} sectionId\n                     * The ID of the section.\n                     *\n                     * @param {String} [contextRecordId]\n                     * The ID of the page's context record.\n                     *\n                     * @return {promise}\n                     */\n                    getPageSection: function (pageId, tabId, sectionId, contextRecordId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageSection\", pageId, tabId, sectionId, null, contextRecordId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageDataFormSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, formSessionId, modelInstanceId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageDataFormSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId) +\n                            \"&formSessionId=\" +\n                            euc(formSessionId) +\n                            \"&modelInstanceId=\" +\n                            euc(modelInstanceId);\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageReportSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                        var reportValues,\n                            url;\n\n                        if (options) {\n                            reportValues = options.reportValues;\n                        }\n\n                        url = buildSvcBaseUrl(this, \"getPageReportSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                        return doPost(this, url, reportValues);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageUIWidgetSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                        var row = null,\n                            url;\n\n                        url = buildSvcBaseUrl(this, \"getPageUIWidgetSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                        if (options) {\n                            if (options.pageRecordId) {\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                            }\n\n                            if (options.rowValues) {\n                                row = options.rowValues;\n                            }\n                        }\n\n                        return doPost(this, url, row);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageUrlSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageUrlSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                        if (options) {\n                            if (options.pageRecordId) {\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                            }\n                        }\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageDataListSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageDataListSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                        if (options) {\n                            if (options.pageRecordId) {\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                            }\n                            if (options.formSessionId) {\n                                url += \"&formSessionId=\" + euc(options.formSessionId);\n                            }\n                            if (options.modelInstanceId) {\n                                url += \"&modelInstanceId=\" + euc(options.modelInstanceId);\n                            }\n                        }\n\n                        return doPost(this, url, row);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageListBuilderSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageListBuilderSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\n\n                        if (options && options.pageRecordId) {\n                            url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                        }\n\n                        return doPost(this, url, row);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getListBuilderAvailableColumns: function (queryViewId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getListBuilderAvailableColumns\") + \"&queryViewId=\" + queryViewId;\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    listBuilderGetInstanceXml: function (queryViewId, request, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"listBuilderGetInstanceXml\") +\n                            \"&queryViewId=\" +\n                            euc(queryViewId);\n\n                        if (options.parameterFormSessionId) {\n                            url += \"&parameterFormSessionId=\" + euc(options.parameterFormSessionId);\n                        }\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    listBuilderGetInstance: function (listBuilderInstanceId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"listBuilderGetInstance\") + \"&listBuilderInstanceId=\" + listBuilderInstanceId;\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    listBuilderClearAllSettings: function (userSettingsPath, queryViewId) {\n\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"listBuilderClearAllSettings\") +\n                            \"&userSettingsPath=\" + userSettingsPath +\n                            \"&queryViewId=\" + queryViewId;\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQueryClearAllSettings: function (userSettingsPath, adHocQueryId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQueryClearAllSettings\") +\n                            \"&userSettingsPath=\" + userSettingsPath +\n                            \"&adHocQueryId=\" + adHocQueryId;\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getAdHocQueryAvailableColumns: function (adHocQueryId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getAdHocQueryAvailableColumns\") + \"&adHocQueryId=\" + adHocQueryId;\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageSummarySectionAction: function (pageId, actionId, contextRecordId, formSessionId, modelInstanceId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageSummarySectionAction\", pageId, null, null, actionId, contextRecordId) +\n                            \"&formSessionId=\" +\n                            euc(formSessionId) +\n                            \"&modelInstanceId=\" +\n                            euc(modelInstanceId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    evaluateDataListSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"evaluateDataListSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\n\n                        if (options) {\n                            if (options.pageRecordId) {\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                            }\n                        }\n\n                        return doPost(this, url, row);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    evaluateListBuilderSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"evaluateListBuilderSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\n\n                        if (options && options.pageRecordId) {\n                            url += \"&pageRecordId=\" + euc(options.pageRecordId);\n                        }\n\n                        return doPost(this, url, row);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    evaluateDataFormSectionActions: function (pageId, tabId, sectionId, contextRecordId, formSessionId, modelInstanceId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"evaluateDataFormSectionActions\", pageId, tabId, sectionId, null, contextRecordId) +\n                            \"&formSessionId=\" +\n                            euc(formSessionId) +\n                            \"&modelInstanceId=\" +\n                            euc(modelInstanceId);\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    dataListGetOutputDefinition: function (dataListId, options) {\n                        var url;\n\n                        options = options || {};\n                        options.cache = true;\n\n                        url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/d/\" + euc(dataListId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    queryViewGetOutputDefinition: function (queryViewId, options) {\n                        var url;\n\n                        options = options || {};\n                        options.cache = true;\n\n                        url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/q/\" + euc(queryViewId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * Loads the results of the specified data list and passes the {@link BBUI.webshell.servicecontracts.DataListLoadReply reply object}\n                     * to the promise.\n                     *\n                     * @param {String} dataListId\n                     * The ID of the data list to load.\n                     *\n                     * @param {String} [contextRecordId]\n                     * The ID of the data list's context record.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {String} options.pageRecordId\n                     * The ID of the page's context record where the data list is rendered.\n                     *\n                     * @param {String} options.parameterFormSessionId\n                     * The ID of the form session that provides parameters to the data list.\n                     *\n                     * @param {Object[]} options.parameters\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the data list results.\n                     * @param {String} options.parameters.name\n                     * @param {Object} options.parameters.value\n                     *\n                     * @param {Boolean} options.returnFlotData\n                     * A flag indicating the data should be returned in a format readable by flot charts.\n                     *\n                     * @param {Boolean} options.returnFormattedValues\n                     * Flag indicating the data list should return formatted values along with the raw values.\n                     *\n                     * @param {String} options.userSettingsPath\n                     * The path used as the key to store user information about the data list, such as column sizes or the last filter values used.\n                     *\n                     * @return {promise}\n                     */\n                    dataListLoad: function (dataListId, contextRecordId, options) {\n                        var sb,\n                            url;\n\n                        options = options || {};\n\n                        sb = [buildDataListSvcBaseUrl(this, dataListId)];\n\n                        pushIf(sb, \"recordId\", contextRecordId);\n\n                        if (options) {\n                            pushIf(sb, \"returnFormattedValues\", \"true\", !!options.returnFormattedValues);\n                            pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                            pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                            pushIf(sb, \"functionalAreaId\", options.functionalAreaId);\n                            pushIf(sb, \"uiWidgetId\", options.uiWidgetId);\n                            pushIf(sb, \"personalizationMode\", options.personalizationMode);\n                            pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                            pushIf(sb, \"returnFlotData\", \"true\", !!options.returnFlotData);\n                            pushIf(sb, \"pageId\", options.pageId);\n                            pushIf(sb, \"tabId\", options.tabId);\n                            pushIf(sb, \"sectionId\", options.sectionId);\n                            pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                            pushIf(sb, \"discardRows\", \"true\", !!options.discardRows);\n                            pushIf(sb, \"returnPageNavigationTree\", \"true\", !!options.returnPageNavigationTree);\n                            pushIf(sb, \"limit\", options.limit);\n                            pushIf(sb, \"cancelId\", options.cancelId);\n\n                            sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\n                        }\n\n                        url = sb.join(\"\");\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * Loads the results of the specified simple data list and passes the {@link BBUI.webshell.servicecontracts.SimpleDataListLoadReply reply object}\n                     * to the promise.\n                     *\n                     * @param {String} simpleDataListId\n                     * The ID of the simple data list to load.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {Object[]} options.parameters\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the simple data list results.\n                     * @param {String} options.parameters.name\n                     * @param {Object} options.parameters.value\n                     * \n                     * @param {String} [options.securityContextFeatureId]\n                     * The feature ID that provides implied security for the given simple data list.\n                     *\n                     * @param {String} [options.securityContextFeatureType]\n                     * The feature type of the feature providing implied security for the given data list.\n                     *\n                     * @return {promise}\n                     */\n                    simpleDataListLoad: function (simpleDataListId, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"simpleDataListLoad\") +\n                            \"&simpleDataListId=\" + euc(simpleDataListId);\n\n                        if (options) {\n                            url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\n                            url = addSecurityContext(url, options);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildPageSectionDataListResultsUrl: function (pageId, tabId, sectionId, dataListId, options) {\n                        var sb,\n                            url;\n\n                        if (!options) {\n                            options = {};\n                        }\n\n                        sb = [buildDataListSvcBaseUrl(this, dataListId, pageId, tabId, sectionId)];\n\n                        pushIf(sb, \"recordId\", options.contextRecordId);\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                        // Adding moreRowsRangeKey back here\n                        // Since buildResultsUrl is always called now to set the proxy connection url, we should always be getting the correct value\n                        pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                        pushIf(sb, \"previousRowCount\", options.previousRowCount);\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                        pushIf(sb, \"personalizationMode\", options.personalizationMode);\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                        pushIf(sb, \"exportFormat\", options.exportFormat);\n                        pushIf(sb, \"cancelId\", options.cancelId);\n\n                        sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\n\n                        url = sb.join(\"\");\n\n                        return url;\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildPageSectionAdHocQueryListResultsUrl: function (pageId, tabId, sectionId, adHocQueryId, queryViewId, options) {\n                        var sb,\n                            svc = this,\n                            url;\n\n                        sb = [buildBaseUrl(svc, \"WebShellAdHocQueryListService.ashx\") +\n                            \"&adHocQueryId=\" + euc(adHocQueryId) +\n                            \"&queryViewId=\" + euc(queryViewId) +\n                            \"&returnResults=true\"];\n\n                        options = options || {};\n\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                        pushIf(sb, \"pageId\", pageId);\n                        pushIf(sb, \"tabId\", tabId);\n                        pushIf(sb, \"sectionId\", sectionId);\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                        pushIf(sb, \"recordId\", options.contextRecordId);\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                        pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\n                        pushIf(sb, \"cancelId\", options.cancelId);\n\n                        url = sb.join(\"\");\n\n                        return url;\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildPageSectionListBuilderResultsUrl: function (pageId, tabId, sectionId, queryViewId, options) {\n                        var sb,\n                            svc = this,\n                            url;\n\n                        sb = [buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\n                            \"&queryViewId=\" + euc(queryViewId) +\n                            \"&returnResults=true\"];\n\n                        options = options || {};\n\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\n                        pushIf(sb, \"pageId\", pageId);\n                        pushIf(sb, \"tabId\", tabId);\n                        pushIf(sb, \"sectionId\", sectionId);\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\n                        pushIf(sb, \"recordId\", options.contextRecordId);\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\n                        pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\n                        pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\n                        pushIf(sb, \"previousRowCount\", options.previousRowCount);\n                        pushIf(sb, \"cancelId\", options.cancelId);\n                        pushIf(sb, \"storeSettingsByContextRecordId\", options.storeSettingsByContextRecordId);\n\n                        url = sb.join(\"\");\n\n                        return url;\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    listBuilderClearCachedResults: function (moreRowsRangeKey) {\n                        var url,\n                            svc = this;\n\n                        url = buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\n                            \"&moreRowsRangeKey=\" + euc(moreRowsRangeKey) +\n                            \"&discardRows=true\";\n\n                        return doGet(svc, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    pageSectionDataListLoad: function (pageId, tabId, sectionId, dataListId, options) {\n                        var url;\n\n                        url = this.buildPageSectionDataListResultsUrl(pageId, tabId, sectionId, dataListId, options);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * Gets the prompt to be displayed before the specified record operation is performed and passes the\n                     * {@link BBUI.webshell.servicecontracts.RecordOperationPrompt reply object} to the promise.\n                     *\n                     * @param {String} recordOperationId\n                     * The ID of the record operation.\n                     *\n                     * @param {String} [recordId]\n                     * The ID of the context record for the record operation.\n                     *\n                     * @return {promise}\n                     */\n                    recordOperationGetPrompt: function (recordOperationId, recordId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"recordOperationGetPrompt\") +\n                            \"&recordOperationId=\" +\n                            euc(recordOperationId);\n\n                        if (recordId) {\n                            url += \"&recordId=\" + euc(recordId);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * Performs a record operation.\n                     *\n                     * @param {String} recordOperationId\n                     * The ID of the record operation.\n                     *\n                     * @param {String} [recordId]\n                     * The ID of the context record for the record operation.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {Object[]} options.parameters\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to to pass as parameters to the record operation.\n                     * @param {String} options.parameters.name\n                     * @param {Object} options.parameters.value\n                     *\n                     * @return {promise}\n                     */\n                    recordOperationPerform: function (recordOperationId, recordId, options) {\n                        var url,\n                            sb,\n                            data;\n\n                        if (options && (options.parameters || options.recordIds)) {\n                            data = {};\n\n                            if (options.parameters) {\n                                data.values = options.parameters;\n                            }\n\n                            if (options.recordIds) {\n                                data.recordIds = options.recordIds;\n                            }\n                        }\n\n                        sb = [buildSvcBaseUrl(this, \"recordOperationPerform\")];\n\n                        pushIf(sb, \"recordOperationId\", recordOperationId);\n                        pushIf(sb, \"recordId\", recordId);\n\n                        url = sb.join(\"\");\n\n                        return doPost(this, url, data);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    searchListGetOutputDefinition: function (searchListId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"searchListGetOutputDefinition\") +\n                            \"&searchListId=\" +\n                            euc(searchListId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    searchListQuickFind: function (searchListId, criteria, options) {\n                        var url;\n\n                        url = buildSearchListSvcBaseUrl(this, searchListId, criteria);\n\n                        if (options) {\n                            if (options.onlyReturnRows) {\n                                url += \"&onlyReturnRows=true\";\n                            }\n                            if (options.maxRecords) {\n                                url += \"&maxRecords=\" + euc(options.maxRecords);\n                            }\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    codeTableEntrySave: function (codeTableName, codeTableEntryId, request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"codeTableEntrySave\") +\n                            \"&codeTableName=\" +\n                            euc(codeTableName) +\n                            \"&codeTableEntryId=\" +\n                            euc(codeTableEntryId);\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    kpiDashboardGetDefinition: function (options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"kpiDashboardGetDefinition\");\n\n                        if (options.returnValues) {\n                            url += \"&returnValues=true\";\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    queryViewGetFieldFindResults: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"queryViewGetFieldFindResults\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    queryViewGetTree: function (id, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"queryViewGetTree\") +\n                            \"&id=\" +\n                            euc(id);\n\n                        if (options && options.forExport === true) {\n                            url += \"&loadExportDefinitionViews=true\";\n                        } else {\n                            url += \"&loadExportDefinitionViews=false\";\n                        }\n\n                        if (options && options.forReportModelGenerator === true) {\n                            url += \"&reportModelViewsOnly=true\";\n                        } else {\n                            url += \"&reportModelViewsOnly=false\";\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    queryViewGetMetaData: function (id) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"queryViewGetMetaData\") +\n                            \"&id=\" +\n                            euc(id);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    queryViewGetTreeNodeFields: function (node, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeFields\") +\n                            \"&node=\" +\n                            euc(node);\n\n                        if (options && options.forReportModelGenerator === true) {\n                            url += \"&reportModelViewsOnly=true\";\n                        } else {\n                            url += \"&reportModelViewsOnly=false\";\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildQueryViewGetTreeNodeChildrenUrl: function (queryViewId, forExport, forReportModelGenerator) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeChildren\");\n\n                        if (BBUI.is(forExport) && forExport === true) {\n                            url += \"&loadExportDefinitionViews=true\";\n                        } else {\n                            url += \"&loadExportDefinitionViews=false\";\n                        }\n\n                        if (BBUI.is(forReportModelGenerator) && forReportModelGenerator === true) {\n                            url += \"&reportModelViewsOnly=true\";\n                        } else {\n                            url += \"&reportModelViewsOnly=false\";\n                        }\n\n                        return url;\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQueryProcess: function (request, options) {\n                        //var cancelCallback,\n                        //    requestObj,\n                        //    scope,\n                        //    state,\n                        var svc,\n                            url;\n\n                        // TODO implement cancellation.\n                        // See http://stackoverflow.com/questions/13928057/how-to-cancel-an-http-request-in-angularjs\n                        //function cancelAdHocQueryProcess() {\n                        //}\n\n                        svc = this;\n\n                        url = buildAdHocQuerySvcBaseUrl(svc);\n\n                        if (options) {\n                            if (options.returnFormattedValues) {\n                                url += \"&returnFormattedValues=true\";\n                            }\n                            if (options.cancelId) {\n                                url += \"&cancelId=\" + options.cancelId;\n                            }\n                        }\n\n                        return doPost(svc, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQueryGetResults: function (request, options) {\n                        var url;\n\n                        url = buildAdHocQuerySvcBaseUrl(this);\n\n                        if (options) {\n                            if (options.returnFormattedValues) {\n                                url += \"&returnFormattedValues=true\" + \"&getResults=true\";\n                            }\n                            if (options.cancelId) {\n                                url += \"&cancelId=\" + euc(options.cancelId);\n                            }\n                        }\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    cancelAsyncOperation: function (cancelId) {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellCancelAsyncOperation.ashx\") +\n                            \"&cancelId=\" +\n                            euc(cancelId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildAdHocQueryExportUrl: function (options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = [];\n                        url.push(buildAdHocQuerySvcBaseUrl(this));\n                        url.push(\"&forExport=true\");\n\n                        pushIf(url, \"getResults\", \"true\", !!options.getResults);\n                        pushIf(url, \"queryViewId\", options.queryViewId);\n\n                        return url.join(\"\");\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildListBuilderExportUrl: function (options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = [];\n                        url.push(buildBaseUrl(this, \"WebShellListBuilderService.ashx\"));\n                        url.push(\"&forExport=true\");\n\n                        pushIf(url, \"queryViewId\", options.queryViewId);\n                        pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\n                        pushIf(url, \"searchText\", options.searchText);\n                        pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\n\n                        return url.join(\"\");\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildAdHocQueryListExportUrl: function (options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = [];\n                        url.push(buildBaseUrl(this, \"WebShellAdHocQueryListService.ashx\"));\n                        url.push(\"&forExport=true\");\n\n                        pushIf(url, \"adHocQueryId\", options.adHocQueryId);\n                        pushIf(url, \"queryViewId\", options.queryViewId);\n                        pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\n                        pushIf(url, \"searchText\", options.searchText);\n                        pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\n\n                        return url.join(\"\");\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQuerySave: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQuerySave\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQuerySaveDataList: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveDataList\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQuerySaveReport: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveReport\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQuerySaveSmartQuery: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveSmartQuery\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQueryGetDefinition: function (id, options) {\n                        var definitionType = options.definitionType,\n                            throwOnInvalidFields = options.throwOnInvalidFields,\n                            url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQueryGetDefinition\") +\n                            \"&id=\" +\n                            euc(id);\n\n                        if (!BBUI.is(definitionType)) {\n                            definitionType = 0; //ad-hoc query\n                        }\n\n                        url += \"&definitionType=\" + euc(definitionType);\n\n                        if (BBUI.is(throwOnInvalidFields)) {\n                            url += \"&throwOnInvalidFields=\" + euc(throwOnInvalidFields);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    adHocQueryDelete: function (id) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"adHocQueryDelete\") +\n                            \"&id=\" +\n                            euc(id);\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    exportDefinitionSave: function (request) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"exportDefinitionSave\");\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    exportDefinitionGetDefinition: function (id) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"exportDefinitionGetDefinition\") +\n                            \"&id=\" +\n                            euc(id);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    smartQueryProcess: function (request, options) {\n                        //var cancelCallback,\n                        //    requestObj,\n                        //    scope,\n                        //    state,\n                        var svc,\n                            url;\n\n                        // TODO implement cancellation.\n                        // See http://stackoverflow.com/questions/13928057/how-to-cancel-an-http-request-in-angularjs\n                        //function cancelSmartQueryProcess() {\n                        //}\n\n                        svc = this;\n\n                        url = buildBaseUrl(svc, \"WebShellSmartQueryService.ashx\");\n\n                        if (options) {\n                            if (options.returnFormattedValues) {\n                                url += \"&returnFormattedValues=true\";\n                            }\n                            if (options.cancelId) {\n                                url += \"&cancelId=\" + euc(options.cancelId);\n                            }\n                        }\n\n                        return doPost(svc, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    smartQueryGetResults: function (request, options) {\n                        var url;\n\n                        url = buildBaseUrl(this, \"WebShellSmartQueryService.ashx\");\n\n                        if (options) {\n                            if (options.returnFormattedValues) {\n                                url += \"&returnFormattedValues=true\" + \"&getResults=true\";\n                            }\n                            if (options.cancelId) {\n                                url += \"&cancelId=\" + euc(options.cancelId);\n                            }\n                        }\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildSmartQueryExportUrl: function (options) {\n                        var url;\n\n                        url = [];\n                        url.push(buildBaseUrl(this, \"WebShellSmartQueryService.ashx\"));\n                        url.push(\"&forExport=true\");\n\n                        if (options && options.getResults) {\n                            url.push(\"&getResults=true\");\n                        }\n\n                        return url.join(\"\");\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userGetFunctionalAreaHistory: function (functionalAreaId, options) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userGetFunctionalAreaHistory\") +\n                            \"&functionalAreaId=\" +\n                            euc(functionalAreaId);\n\n                        if (options) {\n                            if (options.folderPath) {\n                                url += \"&folderPath=\" +\n                                    euc(options.folderPath);\n                            }\n\n                            if (options.includeSearchTasks) {\n                                url += \"&includeSearchTasks=true\";\n                            }\n\n                            if (options.includeShortcuts) {\n                                url += \"&includeShortcuts=true\";\n                            }\n\n                            if (!options.skipMru) {\n                                url += \"&includeMru=true\";\n                            }\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateDataFormSettings: function (formSessionId, userSettingsPath) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdateDataFormSettings\") +\n                            \"&formSessionId=\" +\n                            euc(formSessionId) +\n                            \"&userSettingsPath=\" +\n                            euc(userSettingsPath);\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateSelectedPervasiveSearchTask: function (pervasiveSearchTaskId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdateSelectedPervasiveSearchTask\");\n\n                        if (pervasiveSearchTaskId) {\n                            url += \"&pervasiveSearchTaskId=\" + euc(pervasiveSearchTaskId);\n                        }\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateShortcuts: function (request, options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = buildSvcBaseUrl(this, \"userUpdateShortcuts\");\n\n                        if (options.remove) {\n                            url += \"&remove=\" + euc(options.remove);\n                        }\n\n                        if (options.replace) {\n                            url += \"&replace=\" + euc(options.replace);\n                        }\n\n                        return doPost(this, url, request);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdatePageActionGroupSettings: function (pageId, actionGroups) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageActionGroupSettings\") +\n                            \"&pageId=\" +\n                            euc(pageId);\n\n                        return doPost(this, url, actionGroups);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateFunctionalAreaActionGroupSettings: function (functionalAreaId, actionGroups) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdateFunctionalAreaActionGroupSettings\") +\n                            \"&functionalAreaId=\" +\n                            euc(functionalAreaId);\n\n                        return doPost(this, url, actionGroups);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdatePageDataListSettings: function (pageId, sectionId, dataListId, settings) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageDataListSettings\", pageId, null, sectionId) +\n                            \"&dataListId=\" +\n                            euc(dataListId);\n\n                        return doPost(this, url, settings);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdatePageListBuilderSettings: function (queryViewId, userSettingsPath, settings, options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\n                            \"&queryViewId=\" +\n                            euc(queryViewId) +\n                            \"&userSettingsPath=\" +\n                            euc(userSettingsPath);\n\n                        if (options.storeSettingsByContextRecordId) {\n                            url += \"&storeSettingsByContextRecordId=true\";\n\n                            if (options.contextRecordId) {\n                                url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                            }\n                        }\n\n                        return doPost(this, url, settings);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateAdHocQueryListBuilderSettings: function (queryViewId, adHocQueryId, userSettingsPath, settings) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\n                            \"&queryViewId=\" +\n                            euc(queryViewId) +\n                            \"&adHocQueryId=\" +\n                            euc(adHocQueryId) +\n                            \"&userSettingsPath=\" +\n                            euc(userSettingsPath);\n\n                        return doPost(this, url, settings);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdatePageSectionSettings: function (pageId, sections) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageSectionSettings\") +\n                            \"&pageId=\" +\n                            euc(pageId);\n\n                        return doPost(this, url, sections);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdatePageTabSettings: function (pageId, tabs) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdatePageTabSettings\") +\n                            \"&pageId=\" +\n                            euc(pageId);\n\n                        return doPost(this, url, tabs);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userSetFeatureTipSeen: function (featureTipId, tipSeen) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userSetFeatureTipSeen\");\n\n                        return doPost(this, url, {featureTipId: featureTipId, tipSeen: tipSeen});\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userGetFeatureTipSeen: function (featureTipId, setTipAsSeen) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userGetFeatureTipSeen\");\n\n                        return doPost(this, url, {featureTipId: featureTipId, setTipAsSeen: setTipAsSeen});\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateSearchListGridSettings: function (searchlistid, gridSettings) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdateSearchListGridSettings\") +\n                            \"&searchlistid=\" +\n                            euc(searchlistid);\n\n                        return doPost(this, url, gridSettings);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userGetSearchListGridSettings: function (searchlistid) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userGetSearchListGridSettings\") +\n                            \"&searchlistid=\" +\n                            euc(searchlistid);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    userUpdateActionPanelSettings: function (settings) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"userUpdateActionPanelSettings\");\n\n                        return doPost(this, url, settings);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    featureSearch: function (criteria, onlyRssFeeds) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"featureSearch\") +\n                            \"&criteria=\" +\n                            euc(criteria);\n\n                        if (onlyRssFeeds) {\n                            url += \"&onlyRssFeeds=true\";\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildRssFeedUrl: function (dataListId, contextRecordId) {\n                        var url;\n\n                        url = BBUI.urlConcat(this.baseUrl, \"rssfeed.ashx?WebShell=true&DBName=\" +\n                            euc(this.databaseName) +\n                            \"&DataListID=\" +\n                            euc(dataListId));\n\n                        if (contextRecordId) {\n                            url += \"&ContextRecordID=\" + contextRecordId;\n                        }\n\n                        return url;\n                    },\n\n                    /**\n                     * Loads a data form from the server and passes the {@link BBUI.webshell.servicecontracts.DataFormLoadReply reply object} to the promise.\n                     *\n                     * @param {String} dataFormInstanceId\n                     * The ID of the data form instance to load.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {String} [options.recordId]\n                     * The ID of the record for the data form.\n                     *\n                     * @param {String} [options.contextRecordId]\n                     * The ID of the record that provides context for the data form.\n                     *\n                     * @return {promise}\n                     */\n                    dataFormLoad: function (dataFormInstanceId, options) {\n                        var url;\n\n                        options = options || {};\n\n                        url = buildSvcBaseUrl(this, \"dataFormLoad\") +\n                            \"&dataFormInstanceId=\" +\n                            euc(dataFormInstanceId);\n\n                        if (options.recordId) {\n                            url += \"&recordId=\" + euc(options.recordId);\n                        }\n\n                        if (options.contextRecordId) {\n                            url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                        }\n\n                        url = addSecurityContext(url, options);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * Saves a data form on the server and passes the {@link BBUI.webshell.servicecontracts.DataFormSaveReply reply object} to the promise.\n                     *\n                     * <pre><code>\nvar svc = bbuiShellService.create(),\n    constituentsValueCollection;\n\nif (constituents && constituents.length) {\n    constituentsValueCollection = [];\n    constituents.forEach(function (constituent) {\n        constituentsValueCollection.push([\n            {\n                name: \"CONSTITUENTID\",\n                value: constituent.id\n            },\n            {\n                name: \"DISPLAYNAME\",\n                value: constituent.displayName\n            }\n        ]);\n    });\n}\n\nsvc.dataFormSave(\n    MYFORM_ADD_ID,\n    {\n        contextRecordId: myContextRecordId,\n        values: [\n            {\n                name: \"FIELD1\",\n                value: field1Value\n            },\n            {\n                name: \"FIELD2\",\n                value: field2Value\n            },\n            {\n                name: \"CONSTITUENTS\",\n                collectionValue: constituentsValueCollection\n            }\n        ]\n    }\n).then(function (reply) {\n    console.log(\"Record was created: \" + reply.data.id);\n}, function (reply) {\n    console.err(\"Data form save error: \" + reply.data.message);\n})\n.finally(function () {\n});\n                     * </code></pre>\n                     *\n                     *\n                     * @param {String} dataFormInstanceId The ID of the data form instance to load.\n                     *\n                     * @param {Object} [options]\n                     *\n                     * @param {String} [options.recordId]\n                     * The ID of the record for the data form.\n                     *\n                     * @param {String} [options.contextRecordId]\n                     * The ID of the record that provides context for the data form.\n                     *\n                     * @param {BBUI.uimodeling.restservices.contracts.FieldValue[]} [options.values]\n                     * Any form field default values for the form.\n                     *\n                     * @param {String} [options.securityContextFeatureId]\n                     *\n                     * @param {String} [options.securityContextFeatureType]\n                     *\n                     * @return {promise}\n                     */\n                    dataFormSave: function (dataFormInstanceId, options) {\n                        var url,\n                            data;\n\n                        options = options || {};\n\n                        data = {};\n\n                        url = buildSvcBaseUrl(this, \"dataFormSave\") +\n                            \"&dataFormInstanceId=\" +\n                            euc(dataFormInstanceId);\n\n                        if (options.recordId) {\n                            url += \"&recordId=\" + euc(options.recordId);\n                        }\n\n                        if (options.contextRecordId) {\n                            url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                        }\n\n                        url = addSecurityContext(url, options);\n\n                        if (options.values) {\n                            data.values = options.values;\n                        }\n\n                        return doPost(this, url, data);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    taskWizardGetDefinition: function (taskWizardId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"taskwizardgetdefinition\") +\n                            \"&taskWizardId=\" +\n                            euc(taskWizardId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    taskWizardGetTaskStatus: function (taskId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"taskwizardgettaskstatus\") +\n                            \"&taskId=\" +\n                            euc(taskId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildReportExportUrl: function (reportId, historyId, exportType, deviceInfo, dataFormItemKey, fileName) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"exportReport\") +\n                            \"&reportId=\" + euc(reportId);\n\n                        if (historyId) {\n                            url += \"&historyId=\" + euc(historyId);\n                        }\n\n                        if (!BBUI.is(exportType)) {\n                            exportType = 2;\n                        }\n\n                        url += \"&exportType=\" + euc(exportType);\n\n                        if (deviceInfo) {\n                            url += \"&deviceInfo=\" + euc(deviceInfo);\n                        }\n\n                        if (dataFormItemKey) {\n                            url += \"&dataFormItemKey=\" + euc(dataFormItemKey);\n                        }\n\n                        if (fileName) {\n                            url += \"&fileName=\" + euc(fileName);\n                        }\n\n                        return url;\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    cacheDataFormItem: function (values) {\n                        var url,\n                            data;\n\n                        if (values) {\n                            data = {\n                                values: values\n                            };\n                        }\n\n                        url = buildSvcBaseUrl(this, \"cacheDataFormItem\");\n\n                        return doPost(this, url, data);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    idMap: function (idMapperId, sourceId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"idMap\") +\n                            \"&idMapperId=\" + euc(idMapperId);\n\n                        if (sourceId) {\n                            url += \"&sourceId=\" + euc(sourceId);\n                        }\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    securityUserGrantedFeature: function (id, featureType) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"securityUserGrantedFeature\") +\n                            \"&id=\" + euc(id) +\n                            \"&featureType=\" + euc(featureType);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    loadCatalogItem: function (sourceType, sourceName, itemResourceName) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"loadCatalogItem\") +\n                            \"&sourceType=\" + euc(sourceType) +\n                            \"&sourceName=\" + euc(sourceName) +\n                            \"&itemResourceName=\" + euc(itemResourceName);\n\n                        return doPost(this, url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    getPageHelpKey: function (pageId, tabId, sectionId, recordId) {\n                        var url;\n\n                        url = buildSvcBaseUrl(this, \"getPageHelpkey\", pageId, tabId, sectionId, null, recordId);\n\n                        return doGet(this, url);\n                    },\n\n                    /**\n                     * @return {String}\n                     */\n                    buildSvcBaseUrl: function (action) {\n                        return buildSvcBaseUrl(this, action);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    doGet: function (url) {\n                        return doRequest(this, \"GET\", url, null);\n                    },\n\n                    /**\n                     * @return {promise}\n                     */\n                    doPost: function (url, data) {\n                        return doRequest(this, \"POST\", url, data);\n                    }\n                };\n\n            }());\n\n            /**\n             * @class bbui.shellservice.bbuiShellService\n             */\n            return {\n                /**\n                 *\n                 * @return {bbui.shellservice.bbuiShellService.Service}\n                 */\n                create: function (baseUrl, databaseName, options) {\n                    var svc;\n\n                    baseUrl = baseUrl || bbuiShellServiceConfig.baseUrl;\n                    databaseName = databaseName || bbuiShellServiceConfig.databaseName;\n\n                    if (baseUrl === null || !databaseName) {\n                        throw new Error('You must either provide a baseUrl and databaseName as parameters or set them globally using bbuiShellServiceConfig.');\n                    }\n\n                    svc = new Service(baseUrl, databaseName, options);\n                    svc.$http = $http;\n\n                    return svc;\n                }\n            };\n        }]);\n}());\n",
    "/*global angular */\n\n(function () {\n    \"use strict\";\n\n    angular.module('bbui.uimodelingservice', [])\n        /**\n         * @class bbui.uimodelingservice.bbuiUIModelingServiceConfig\n         *\n         * Configuration for {@link bbui.uimodelingservice.bbuiUIModelingService bbuiUIModelingService}.\n         */\n        .constant('bbuiUIModelingServiceConfig', {\n            /**\n             * @cfg {String} baseUrl\n             */\n            baseUrl: null,\n            /**\n             * @cfg {String} databaseName\n             */\n            databaseName: null\n        })\n        .factory('bbuiUIModelingService', ['$http', 'bbui', 'bbuiUIModelingServiceConfig', function ($http, BBUI, bbuiUIModelingServiceConfig) {\n            var euc,\n                formSessionServerIds,\n                formSessionServerIdsBufferPos,\n                formSessionServerIdsBufferSize,\n                Service;\n\n            // Since this is called many times in this file, create a shorter alias for it.\n            euc = encodeURIComponent;\n\n            formSessionServerIds = [];\n            formSessionServerIdsBufferPos = 0;\n            formSessionServerIdsBufferSize = 100;\n\n            function buildSvcBaseUrl(svc, action, formSessionId, modelInstanceId, fieldId) {\n                var url;\n\n                url =\n                    BBUI.urlConcat(svc.baseUrl, \"uimodel/UIModelingService.ashx?action=\") +\n                    action +\n                    \"&databaseName=\" + euc(svc.databaseName);\n\n                if (svc.runAs) {\n                    url += \"&runAs=\" + euc(svc.runAs);\n                }\n\n                if (formSessionId) {\n                    url += \"&formSessionId=\" + euc(formSessionId);\n                }\n\n                if (modelInstanceId) {\n                    url += \"&modelInstanceId=\" + euc(modelInstanceId);\n                }\n\n                if (fieldId) {\n                    url += \"&fieldId=\" + euc(fieldId);\n                }\n\n                return url;\n            }\n\n            function doRequest(svc, method, url, data) {\n                return svc.$http({\n                    method: method,\n                    url: url,\n                    data: data,\n                    cache: false\n                });\n            }\n\n            function doGet(svc, url) {\n                return doRequest(svc, \"GET\", url, null);\n            }\n\n            function doPost(svc, url, data) {\n                return doRequest(svc, \"POST\", url, data);\n            }\n\n            /**\n             * @private\n             *\n             * @param {String} url\n             *\n             * @param {Object} [options]\n             *\n             * @param {String} [options.recordId]\n             *\n             * @param {String} [options.contextRecordId]\n             *\n             * @param {String} [options.uiWidgetDashboardSystemId]\n             *\n             * @param {String} [options.uiWidgetDashboardWidgetId]\n             *\n             * @param {String} [options.userSettingsPath]\n             *\n             * @return {String}\n             * The URL with query string parameters appended.\n             */\n            function addOptionalFormSessionArgs(url, options) {\n\n                if (options) {\n                    if (options.recordId) {\n                        url += \"&recordId=\" + euc(options.recordId);\n                    }\n\n                    if (options.contextRecordId) {\n                        url += \"&contextRecordId=\" + euc(options.contextRecordId);\n                    }\n\n                    if (options.uiWidgetDashboardSystemId) {\n                        url += \"&uiWidgetDashboardSystemId=\" + euc(options.uiWidgetDashboardSystemId);\n                    }\n\n                    if (options.uiWidgetDashboardWidgetId) {\n                        url += \"&uiWidgetDashboardWidgetId=\" + euc(options.uiWidgetDashboardWidgetId);\n                    }\n\n                    if (options.userSettingsPath) {\n                        url += \"&userSettingsPath=\" + euc(options.userSettingsPath);\n                    }\n                }\n\n                return url;\n            }\n\n            /**\n             * @class bbui.uimodelingservice.bbuiUIModelingService.Service\n             * Provides various methods for communicating changes to a UI model to the web server.\n             *\n             * @param {String} baseUrl\n             * The base URL to the web server.\n             *\n             * @param {String} databaseName\n             * The name of the database to which to connect.\n             *\n             * @param {Object} [options]\n             *\n             * @param {Object} options.runAs\n             *\n             * @param {Object} options.onRequestBegin\n             *\n             * @param {Object} options.onRequestEnd\n             *\n             * @param {Object} options.httpHeaders\n             *\n             * @param {Object} options.useEventQueue\n             *\n             */\n            Service = function (baseUrl, databaseName, options) {\n\n                var svc,\n                    useEventQueue;\n\n                svc = this;\n\n                /**\n                 * @readonly\n                 * The base URL to the web server.\n                 * @property baseUrl\n                 * @type String\n                 */\n                svc.baseUrl = baseUrl;\n\n                /**\n                 * @readonly\n                 * The name of the database to which to connect.\n                 * @property databaseName\n                 * @type String\n                 */\n                svc.databaseName = databaseName;\n\n                if (options) {\n                    svc.runAs = options.runAs;\n                    svc.onRequestBegin = options.onRequestBegin;\n                    svc.onRequestEnd = options.onRequestEnd;\n                    svc.httpHeaders = options.httpHeaders;\n                    svc.useEventQueue = useEventQueue = BBUI.is(options.useEventQueue) ? options.useEventQueue : true;\n\n                    if (useEventQueue) {\n                        svc._formSessionQueue = {};\n                    }\n                }\n\n                /**\n                 * @property handlers\n                 * @type Object\n                 */\n                svc.handlers = {};\n            };\n\n            Service.prototype = {\n\n                /**\n                 */\n                on: function (evt, fn, scope, formSessionId) {\n                    var evtHandlers,\n                        handlers;\n\n                    handlers = this.handlers;\n\n                    evtHandlers = handlers[evt];\n\n                    if (!evtHandlers) {\n                        evtHandlers = handlers[evt] = [];\n                    }\n\n                    evtHandlers.push({\n                        fn: fn,\n                        formSessionId: formSessionId,\n                        scope: scope\n                    });\n                },\n\n                /**\n                 */\n                un: function (evt, fn, formSessionId) {\n                    var evtHandlers,\n                        i;\n\n                    evtHandlers = this.handlers[evt];\n\n                    if (evtHandlers) {\n                        i = evtHandlers.length;\n                        while (i--) {\n                            if (evtHandlers[i].fn === fn && evtHandlers[i].formSessionId === formSessionId) {\n                                evtHandlers.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Creates an instance of the form on the server.\n                 *\n                 * @param {String} assemblyName\n                 * The assembly name containing the UI model class.\n                 *\n                 * @param {String} className\n                 * The name of the UI model class.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createFormSession: function (assemblyName, className, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createFormSession\") +\n                        \"&assemblyName=\" +\n                        euc(assemblyName) +\n                        \"&className=\" +\n                        euc(className);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the form on the server.\n                 *\n                 * @param {String} mergeTaskId\n                 * The Id of the merge task.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createMergeTaskFormSession: function (mergeTaskId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createMergeTaskFormSession\") +\n                        \"&mergeTaskId=\" +\n                        euc(mergeTaskId);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the form on the server.\n                 *\n                 * @param {String} dataFormInstanceId\n                 * The ID of the data form instance to interact with.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createDataFormSession: function (dataFormInstanceId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createDataFormSession\") +\n                        \"&dataFormInstanceId=\" +\n                        euc(dataFormInstanceId);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the form on the server.\n                 *\n                 * @param {String} searchListId\n                 * The ID of the search list to interact with.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateSearchListFormSessionArgs} [args]\n                 * Arguments to pass to the search list session.\n                 *\n                 * @return {promise}\n                 */\n                createSearchListSession: function (searchListId, args) {\n\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"createSearchListFormSession\") +\n                        \"&searchListId=\" +\n                        euc(searchListId);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the data list's filter form on the server.\n                 *\n                 * @param {String} dataFormInstanceId\n                 * The ID of the data list to interact with.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createDataListFilterFormSession: function (dataListId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createDataListFilterFormSession\") +\n                        \"&dataListId=\" +\n                        euc(dataListId);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the list builder filter form on the server.\n                 *\n                 * @param {String} queryViewId\n                 * The ID of the query view used to render the list.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createListBuilderFilterFormSession: function (queryViewId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createListBuilderFilterFormSession\") +\n                        \"&queryViewId=\" +\n                        euc(queryViewId);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the report's parameter form on the server.\n                 *\n                 * @param {String} reportId\n                 * The ID of the report to interact with.\n                 *\n                 * @param {String} historyId\n                 * The history ID of the report to interact with.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 *\n                 * @param {Boolean} [options.showAllParameters]\n                 *\n                 * @return {promise}\n                 */\n                createReportParameterFormSession: function (reportId, historyId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createReportParameterFormSession\") +\n                        \"&reportId=\" +\n                        euc(reportId);\n\n                    if (historyId) {\n                        url += \"&historyId=\" + euc(historyId);\n                    }\n\n                    if (options.showAllParameters) {\n                        url += \"&showAllParameters=true\";\n                    }\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 * Creates an instance of the business process's parameter form on the server.\n                 *\n                 * @param {String} businessProcessId\n                 * The ID of the data form instance to interact with.\n                 *\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\n                 * Arguments to pass to the form session.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.recordId]\n                 * The ID of the record being edited.\n                 *\n                 * @param {String} [options.contextRecordId]\n                 * The ID of the record that provides the context for the record being added or edited.\n                 *\n                 * @param {String} [options.uiWidgetDashboardSystemId]\n                 *\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\n                 *\n                 * @param {String} [options.userSettingsPath]\n                 *\n                 * @return {promise}\n                 */\n                createBusinessProcessFormSession: function (businessProcessId, args, options) {\n\n                    var url;\n\n                    options = options || {};\n\n                    url = buildSvcBaseUrl(this, \"createBusinessProcessFormSession\") +\n                        \"&businessProcessId=\" +\n                        euc(businessProcessId);\n\n                    url = addOptionalFormSessionArgs(url, options);\n\n                    return doPost(this, url, args);\n                },\n\n                /**\n                 */\n                buildSearchListResultsUrl: function (formSessionId, modelInstanceId, htmlEncodeValues, returnFormattedValues, taskId, taskHistoryId, cancelId) {\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\") + euc(this.databaseName);\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    url +=\n                        \"&formSessionId=\" + euc(formSessionId) +\n                        \"&modelInstanceId=\" + euc(modelInstanceId);\n\n                    if (htmlEncodeValues) {\n                        url += \"&htmlEncodeValues=true\";\n                    }\n\n                    if (returnFormattedValues) {\n                        url += \"&returnFormattedValues=true\";\n                    }\n\n                    if (taskId) {\n                        url += \"&taskId=\" + euc(taskId);\n                    }\n\n                    if (taskHistoryId) {\n                        url += \"&taskHistoryId=\" + euc(taskHistoryId);\n                    }\n\n                    if (cancelId) {\n                        url += \"&cancelId=\" + euc(cancelId);\n                    }\n\n                    return url;\n                },\n\n                /**\n                 */\n                buildStartBusinessProcessUrl: function (businessProcessId, parameterSetId, dataFormItemKey, businessProcessStatusId) {\n                    var url;\n\n                    url =\n                        BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingBusinessProcessService.ashx?databaseName=\") + euc(this.databaseName) +\n                        \"&businessProcessId=\" + euc(businessProcessId);\n\n                    if (BBUI.is(parameterSetId)) {\n                        url += \"&parameterSetId=\" + euc(parameterSetId);\n                    }\n\n                    if (BBUI.is(dataFormItemKey)) {\n                        url += \"&dataFormItemKey=\" + euc(dataFormItemKey);\n                    }\n\n                    if (BBUI.is(businessProcessStatusId)) {\n                        url += \"&businessProcessStatusId=\" + euc(businessProcessStatusId);\n                    }\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return url;\n                },\n\n                /**\n                 * Gets the output definition of a search.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the search list form model.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the search list form model.\n                 *\n                 * @param {Boolean} returnExistingResults\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.taskHistoryId]\n                 *\n                 * @return {promise}\n                 */\n                searchListGetOutputDefinition: function (formSessionId, modelInstanceId, returnExistingResults, options) {\n\n                    var url = buildSvcBaseUrl(this, \"searchListGetOutputDefinition\", formSessionId, modelInstanceId) +\n                        \"&returnExistingResults=\" +\n                        (returnExistingResults ? \"true\" : \"false\");\n\n                    if (!options) {\n                        options = {};\n                    }\n\n                    if (options.taskHistoryId) {\n                        url += \"&taskHistoryId=\" + euc(options.taskHistoryId);\n                    }\n\n                    return doGet(this, url);\n                },\n\n                /**\n                 * Gets the results of a search.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the search list form model.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the search list form model.\n                 *\n                 * @param {Object} htmlEncodeValues\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {Boolean} [options.returnFormattedValues]\n                 *\n                 * @param {String} [options.taskId]\n                 *\n                 * @param {String} [options.taskHistoryId]\n                 *\n                 * @param {String} [options.cancelId]\n                 *\n                 * @return {promise}\n                 */\n                getSearchListResults: function (formSessionId, modelInstanceId, htmlEncodeValues, options) {\n\n                    var url;\n\n                    if (!options) {\n                        options = {};\n                    }\n\n                    // Append a timestamp to the end of the URL so the results aren't cached by the browser.\n                    url = this.buildSearchListResultsUrl(formSessionId,\n                        modelInstanceId,\n                        htmlEncodeValues,\n                        options.returnFormattedValues,\n                        options.taskId,\n                        options.taskHistoryId,\n                        options.cancelId) +\n                        \"&_reqid=\" + new Date().getTime();\n\n                    return doGet(this, url);\n                },\n\n                /**\n                 * Invokes the searchItemSelected event with the given search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the search form session.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the search model instance.\n                 *\n                 * @param {Number} selectedIndex\n                 * The zero-based index of the selected search result row.\n                 *\n                 * @return {promise}\n                 */\n                invokeSearchItemSelected: function (formSessionId, modelInstanceId, selectedIndex) {\n\n                    var url = buildSvcBaseUrl(this, \"invokeSearchItemSelected\", formSessionId, modelInstanceId);\n\n                    return doPost(this, url, selectedIndex);\n                },\n\n                /**\n                 * Invokes the search list associated with the given search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the search field.\n                 *\n                 * @return {promise}\n                 */\n                invokeFieldSearch: function (formSessionId, modelInstanceId, fieldName) {\n\n                    var url = buildSvcBaseUrl(this, \"invokeFieldSearch\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url);\n                },\n\n                /**\n                 * Invokes quick find on the given search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the search field.\n                 *\n                 * @param {String} criteria\n                 * The quick find criteria.\n                 *\n                 * @return {promise}\n                 */\n                invokeFieldQuickFind: function (formSessionId, modelInstanceId, fieldName, criteria) {\n\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\n                        euc(this.databaseName) +\n                        \"&formSessionId=\" +\n                        euc(formSessionId) +\n                        \"&modelInstanceId=\" +\n                        euc(modelInstanceId) +\n                        \"&fieldId=\" +\n                        euc(fieldName) +\n                        \"&quickFindCriteria=\" +\n                        euc(criteria));\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return doPost(this, url);\n                },\n\n                /**\n                 * Invokes the search list associated with the given search field and executes the search.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the search field.\n                 *\n                 * @return {promise}\n                 */\n                invokeFieldAutoSearch: function (formSessionId, modelInstanceId, fieldName) {\n\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\n                        euc(this.databaseName) +\n                        \"&formSessionId=\" +\n                        euc(formSessionId) +\n                        \"&modelInstanceId=\" +\n                        euc(modelInstanceId) +\n                        \"&fieldId=\" +\n                        euc(fieldName) +\n                        \"&autoSearch=true\");\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return doPost(this, url);\n                },\n\n                /**\n                 * Invokes quick find on the given search list.\n                 *\n                 * @param {String} searchListId\n                 * The ID of the search list.\n                 *\n                 * @param {String} criteria\n                 * The quick find criteria.\n                 *\n                 * @return {promise}\n                 */\n                invokeQuickFind: function (searchListId, criteria) {\n\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\n                        euc(this.databaseName) +\n                        \"&searchListId=\" +\n                        euc(searchListId) +\n                        \"&quickFindCriteria=\" +\n                        euc(criteria));\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return doPost(this, url);\n                },\n\n                /**\n                 * Checks the current values of a data form session's fields to see if there are matching records already in the database.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the data.\n                 *\n                 * @return {promise}\n                 */\n                checkForDuplicate: function (formSessionId, modelInstanceId) {\n\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\n                        euc(this.databaseName) +\n                        \"&formSessionId=\" +\n                        euc(formSessionId) +\n                        \"&modelInstanceId=\" +\n                        euc(modelInstanceId) +\n                        \"&duplicateCheck=true\");\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the search field.\n                 *\n                 * @param {String} searchFormSessionId\n                 * The ID of the search form session that was invoked.\n                 *\n                 * @param {Number} selectedIndex\n                 * The zero-based index of the selected search result row.\n                 *\n                 * @return {promise}\n                 */\n                selectFieldSearchItem: function (formSessionId, modelInstanceId, fieldName, searchFormSessionId, selectedIndex) {\n\n                    var url = buildSvcBaseUrl(this, \"selectFieldSearchItem\", formSessionId, modelInstanceId, fieldName) +\n                        \"&searchFormSessionId=\" +\n                        euc(searchFormSessionId);\n\n                    return doPost(this, url, selectedIndex);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the search field.\n                 *\n                 * @param {String} recordId\n                 * The ID of the selected record.\n                 *\n                 * @return {promise}\n                 */\n                selectFieldSearchItemById: function (formSessionId, modelInstanceId, fieldName, recordId) {\n\n                    var url = buildSvcBaseUrl(this, \"selectFieldSearchItemById\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, recordId);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} actionName\n                 * The name of the search action.\n                 *\n                 * @param {String} searchFormSessionId\n                 * The ID of the search form session that was invoked.\n                 *\n                 * @param {Number} selectedIndex\n                 * The zero-based index of the selected search result row.\n                 *\n                 * @return {promise}\n                 */\n                selectActionSearchItem: function (formSessionId, modelInstanceId, actionName, searchFormSessionId, selectedIndex) {\n\n                    var url = buildSvcBaseUrl(this, \"selectSearchItemAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" + actionName +\n                        \"&searchFormSessionId=\" +\n                        euc(searchFormSessionId);\n\n                    return doPost(this, url, selectedIndex);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} actionName\n                 * The name of the search action.\n                 *\n                 * @param {String} recordId\n                 * The ID of the selected record.\n                 *\n                 * @return {promise}\n                 */\n                selectActionSearchItemById: function (formSessionId, modelInstanceId, actionName, recordId) {\n\n                    var url = buildSvcBaseUrl(this, \"selectSearchItemActionById\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" + actionName;\n\n                    return doPost(this, url, recordId);\n                },\n\n                /**\n                 * Updates a field on the form.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {String|Number|Boolean|Object} value\n                 * The field's value.\n                 *\n                 * @return {promise}\n                 */\n                updateField: function (formSessionId, modelInstanceId, fieldName, value) {\n\n                    var url = buildSvcBaseUrl(this, \"updateField\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, value);\n                },\n\n                /**\n                 * Updates multiple fields on the form.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and fields to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the fields to be updated.\n                 *\n                 * @param {Object[]} fieldValues\n                 * @param {String} fieldValues.name\n                 * @param {Object} fieldValues.value\n                 *\n                 * @return {promise}\n                 */\n                updateMultipleFields: function (formSessionId, modelInstanceId, fieldValues) {\n\n                    var url = buildSvcBaseUrl(this, \"updateMultipleFields\", formSessionId, modelInstanceId);\n\n                    return doPost(this, url, fieldValues);\n                },\n\n                /**\n                 * Updates one or more special properties on a relationship map field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {Object[]} properties\n                 * The properties on the relationship map field to update.\n                 * @param {String} properties.name\n                 * @param {Object} properties.value\n                 *\n                 * @return {promise}\n                 */\n                updateRelationshipMapFieldProperties: function (formSessionId, modelInstanceId, fieldName, properties) {\n\n                    var url = buildSvcBaseUrl(this, \"updateRelationshipMapFieldProperties\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, properties);\n                },\n\n                /**\n                 * Selects or de-selects the given tree view node.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {String} nodePath\n                 * The fully qualified path of the node to select.\n                 *\n                 * @return {promise}\n                 */\n                selectTreeViewNode: function (formSessionId, modelInstanceId, fieldName, nodePath) {\n\n                    var url = buildSvcBaseUrl(this, \"selectTreeViewNode\", formSessionId, modelInstanceId, fieldName) +\n                        \"&nodePath=\" +\n                        euc(nodePath);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Selects or de-selects the given tree view nodes.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {String} nodePaths\n                 * The fully qualified path of each node to select.\n                 *\n                 * @return {promise}\n                 */\n                selectTreeViewNodes: function (formSessionId, modelInstanceId, fieldName, nodePaths) {\n\n                    var url = buildSvcBaseUrl(this, \"selectTreeViewNodes\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, nodePaths);\n                },\n\n                /**\n                 * Sets the expanded property on a tree view node.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {String} nodePath\n                 * The fully qualified path of the node.\n                 *\n                 * @param {Boolean} expanded\n                 * A flag indicating whether the node is expanded.\n                 *\n                 * @return {promise}\n                 */\n                setTreeViewNodeExpanded: function (formSessionId, modelInstanceId, fieldName, nodePath, expanded) {\n\n                    var url = buildSvcBaseUrl(this, \"setTreeViewNodeExpanded\", formSessionId, modelInstanceId, fieldName) +\n                        \"&nodePath=\" +\n                        euc(nodePath) +\n                        \"&expanded=\" +\n                        euc(expanded);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Adds a code table entry and sets the specified field's value to the new code table entry.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the field to be updated.\n                 *\n                 * @param {String|Number|Boolean|Object} codeTableEntryDescription\n                 * The description of the code table entry to add.\n                 *\n                 * @return {promise}\n                 */\n                addCodeTableEntry: function (formSessionId, modelInstanceId, fieldName, codeTableEntryDescription) {\n\n                    var url = buildSvcBaseUrl(this, \"addCodeTableEntry\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, codeTableEntryDescription);\n                },\n\n                /**\n                 * Deletes an item from a collection field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the collection field containing the item to be deleted.\n                 *\n                 * @param {String} itemInstanceId\n                 * The ID of the item to be deleted.\n                 *\n                 * @return {promise}\n                 */\n                deleteCollectionItem: function (formSessionId, modelInstanceId, fieldName, itemInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"deleteCollectionItem\", formSessionId, modelInstanceId, fieldName) +\n                        \"&itemInstanceId=\" +\n                        euc(itemInstanceId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Deletes items from a collection field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the collection field containing the item to be deleted.\n                 *\n                 * @param {String[]} itemInstanceIds\n                 * The items to be deleted.\n                 *\n                 * @return {promise}\n                 */\n                deleteCollectionItems: function (formSessionId, modelInstanceId, fieldName, itemInstanceIds) {\n\n                    var url = buildSvcBaseUrl(this, \"deleteCollectionItems\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, itemInstanceIds);\n                },\n\n                /**\n                 * Deletes all selected items from a collection field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the collection field containing the item to be deleted.\n                 *\n                 * @return {promise}\n                 */\n                deleteSelectedCollectionItems: function (formSessionId, modelInstanceId, fieldName) {\n\n                    var url = buildSvcBaseUrl(this, \"deleteSelectedCollectionItems\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Selects or de-selects an item in a collection field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the collection field to be updated.\n                 *\n                 * @param {String} itemInstanceId\n                 * The ID of the item.\n                 *\n                 * @param {Boolean} selected\n                 * The selected state of the item.\n                 *\n                 * @return {promise}\n                 */\n                setCollectionItemSelected: function (formSessionId, modelInstanceId, fieldName, itemInstanceId, selected) {\n\n                    var url = buildSvcBaseUrl(this, \"selectCollectionItem\", formSessionId, modelInstanceId, fieldName) +\n                        \"&itemInstanceId=\" +\n                        euc(itemInstanceId) +\n                        \"&selected=\" +\n                        (selected ? \"true\" : \"false\");\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Moves an item to a different position in the collection.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and field to be updated.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the field to be updated.\n                 *\n                 * @param {String} fieldName\n                 * The name of the collection field to be updated.\n                 *\n                 * @param {String} itemInstanceId\n                 * The ID of the item.\n                 *\n                 * @param {Number} newIndex\n                 * The new index (zero-based) for the item.\n                 *\n                 * @return {promise}\n                 */\n                moveCollectionItem: function (formSessionId, modelInstanceId, fieldName, itemInstanceId, newIndex) {\n\n                    var url = buildSvcBaseUrl(this, \"moveCollectionItem\", formSessionId, modelInstanceId, fieldName) +\n                        \"&itemInstanceId=\" +\n                        euc(itemInstanceId) +\n                        \"&newindex=\" +\n                        euc(newIndex);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Saves the form instance on the server.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session to save.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {Boolean} [options.returnDataFormItem]\n                 * Flag indicating whether the data form item XML should be returned with the save result.  For backwards compatibility with the Windows ClickOnce shell.\n                 *\n                 * @param {Boolean} [options.storeDataFormItem]\n                 *\n                 * @param {Boolean} [options.skipValidate]\n                 *\n                 * @return {promise}\n                 */\n                confirmForm: function (formSessionId, options) {\n\n                    var url;\n\n                    if (!BBUI.is(options)) {\n                        options = {};\n                    }\n\n                    url = buildSvcBaseUrl(this, \"confirmFormSession\", formSessionId);\n\n                    if (options.returnDataFormItem) {\n                        url += \"&returnDataFormItem=true\";\n                    }\n\n                    if (options.storeDataFormItem) {\n                        url += \"&storeDataFormItem=true\";\n                    }\n\n                    if (options.skipValidate) {\n                        url += \"&skipValidate=true\";\n                    }\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Cancels the form instance on the server and removes it from the session.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session to cancel.\n                 *\n                 * @param {Boolean} overrideDirty\n                 * Flag indicating whether to cancel the form even if its values have changed since it was created.\n                 *\n                 * @return {promise}\n                 */\n                cancelSession: function (formSessionId, overrideDirty) {\n\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"closeFormSession\", formSessionId);\n                    url += \"&canceling=true\";\n\n                    if (overrideDirty) {\n                        url += \"&overridedirty=true\";\n                    }\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Sends a response to a prompt to the server.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that caused the prompt.\n                 *\n                 * @param {String} modelInstanceId\n                 * ID of the model instance that caused the prompt.\n                 *\n                 * @param {String} promptId\n                 * The ID of the prompt being responded to.\n                 *\n                 * @param {String|Number|Boolean|Object} response\n                 * The prompt response.\n                 *\n                 * @return {promise}\n                 */\n                handlePrompt: function (formSessionId, modelInstanceId, promptId, response) {\n\n                    var url = buildSvcBaseUrl(this, \"handlePrompt\", formSessionId, modelInstanceId) +\n                        \"&promptId=\" +\n                        euc(promptId);\n\n                    return doPost(this, url, response);\n                },\n\n                /**\n                 * Invokes an action on the server.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the action.\n                 *\n                 * @param {String} modelInstanceId\n                 * ID of the model instance that contains the action.\n                 *\n                 * @param {String} actionName\n                 * Name of the action to invoke.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {Object} [options.parameters]\n                 *\n                 * @param {Object} [options.defaultValues]\n                 *\n                 * @param {String} [options.cancelId]\n                 *\n                 * @return {promise}\n                 */\n                invokeAction: function (formSessionId, modelInstanceId, actionName, options) {\n\n                    var data,\n                        url;\n\n                    url = buildSvcBaseUrl(this, \"invokeAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" +\n                        euc(actionName);\n\n                    if (options) {\n                        if (options.parameters || options.defaultValues) {\n                            data = {};\n                            if (options.parameters) {\n                                data.parameters = options.parameters;\n                            }\n                            if (options.defaultValues) {\n                                data.defaultValues = options.defaultValues;\n                            }\n                        }\n                        if (options.cancelId) {\n                            url += \"&cancelId=\" + euc(options.cancelId);\n                        }\n                    } else {\n                        data = null;\n                    }\n\n                    return doPost(this, url, data);\n                },\n\n                /**\n                 * Confirms a child form that was shown as a result of a form action.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session.\n                 *\n                 * @param {String} modelInstanceId\n                 * ID of the model instance that invoked the action.\n                 *\n                 * @param {String} actionName\n                 * Name of the invoked action.\n                 *\n                 * @param {String} confirmFormSessionId\n                 * The ID of the child form session.\n                 *\n                 * @return {promise}\n                 */\n                confirmFormAction: function (formSessionId, modelInstanceId, actionName, confirmFormSessionId) {\n\n                    var url = buildSvcBaseUrl(this, \"confirmFormAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" +\n                        euc(actionName) +\n                        \"&confirmFormSessionId=\" +\n                        euc(confirmFormSessionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Cancels a child form that was shown as a result of a form action.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session.\n                 *\n                 * @param {String} modelInstanceId\n                 * ID of the model instance that invoked the action.\n                 *\n                 * @param {String} actionName\n                 * Name of the invoked action.\n                 *\n                 * @return {promise}\n                 */\n                cancelFormAction: function (formSessionId, modelInstanceId, actionName) {\n\n                    var url = buildSvcBaseUrl(this, \"cancelFormAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" +\n                        euc(actionName);\n\n                    return doPost(this, url, null);\n\n                },\n\n                /**\n                 * Server side notification that a close form request is being made.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session.\n                 *\n                 * @return {promise}\n                 */\n                notifyFormHidden: function (formSessionId) {\n\n                    var url = buildSvcBaseUrl(this, \"notifyFormHidden\", formSessionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Server side notification that a close form request is being made.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session.\n                 *\n                 * @return {promise}\n                 */\n                notifyFormShown: function (formSessionId) {\n\n                    var url = buildSvcBaseUrl(this, \"notifyFormShown\", formSessionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 *\n                 * @param {String} start\n                 * The starting row which is being requested.  Start + paging size number of rows should be returned.\n                 *\n                 * @return {promise}\n                 */\n                invokeCollectionPageChange: function (formSessionId, modelInstanceId, fieldName, start) {\n\n                    var url = buildSvcBaseUrl(this, \"invokeCollectionPageChange\", formSessionId, modelInstanceId, fieldName) +\n                        \"&start=\" + start;\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 *\n                 * @param {Object} selectionData\n                 * The selection data to be sent to the server. Conforms to the CollectionSelectionModel contract.\n                 *\n                 * @return {promise}\n                 */\n                invokeCollectionSelectionUpdate: function (formSessionId, modelInstanceId, fieldName, selectionData) {\n\n                    var url = buildSvcBaseUrl(this, \"collectionSelectionUpdate\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, selectionData);\n                },\n\n                /**\n                 * Selects a search list row to represent the value of the search field.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 *\n                 * @param {String} actionName\n                 * The grid field special action name.\n                 *\n                 * @return {promise}\n                 */\n                invokeCollectionSpecialAction: function (formSessionId, modelInstanceId, fieldName, actionName) {\n\n                    var url = buildSvcBaseUrl(this, \"invokeCollectionSpecialAction\", formSessionId, modelInstanceId, fieldName) +\n                        \"&actionname=\" + actionName;\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Notifies the UIModel that a file has been selected in the file picker dialog.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldName\n                 *\n                 * @param {String} fileName\n                 * The name of the newly selected file.\n                 *\n                 * @return {promise}\n                 */\n                invokeFileChanged: function (formSessionId, modelInstanceId, fieldName, fileName) {\n\n                    var url = buildSvcBaseUrl(this, \"selectFile\", formSessionId, modelInstanceId, fieldName);\n\n                    return doPost(this, url, fileName);\n                },\n\n                /**\n                 * Cancels an action on the server.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the model and search field.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the model instance containing the search field.\n                 *\n                 * @param {String} fieldId\n                 *\n                 * @param {String} cancelId\n                 * Uniquely identifies the running action on the server.\n                 *\n                 * @return {promise}\n                 */\n                cancelAction: function (formSessionId, modelInstanceId, fieldId, cancelId) {\n\n                    var url = buildSvcBaseUrl(this, \"cancelAction\", formSessionId, modelInstanceId, fieldId) +\n                        \"&cancelId=\" + euc(cancelId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                getFieldDataSourceUrl: function (formSessionId, modelInstanceId, fieldName) {\n                    return buildSvcBaseUrl(this, \"getFieldDataSource\", formSessionId, modelInstanceId, fieldName);\n                },\n\n                /**\n                 */\n                getFieldDataSource: function (formSessionId, modelInstanceId, fieldName) {\n                    var url = buildSvcBaseUrl(this, \"getFieldDataSource\", formSessionId, modelInstanceId, fieldName);\n                    return doGet(this, url);\n                },\n\n                /**\n                 */\n                getFieldImageUrl: function (formSessionId, modelInstanceId, fieldName) {\n                    return buildSvcBaseUrl(this, \"getFieldImage\", formSessionId, modelInstanceId, fieldName);\n                },\n\n                /**\n                 */\n                getFieldFileUrl: function (formSessionId, modelInstanceId, fieldName, options) {\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"getFieldFile\", formSessionId, modelInstanceId, fieldName);\n\n                    if (options && options.fileName) {\n                        url += \"&fileName=\" + euc(options.fileName);\n                    }\n\n                    return url;\n                },\n\n                /**\n                 */\n                getCustomFileUrl: function (formSessionId, modelInstanceId, key, fileName) {\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"getCustomFile\", formSessionId, modelInstanceId) +\n                        \"&key=\" +\n                        euc(key) +\n                        \"&fileName=\" + euc(fileName);\n\n                    return url;\n                },\n\n                /**\n                 */\n                getUploadFieldImageUrl: function (formSessionId, modelInstanceId, fieldName, thumbnailFieldName) {\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"uploadFieldImage\", formSessionId, modelInstanceId, fieldName);\n\n                    if (thumbnailFieldName) {\n                        url += \"&thumbnailFieldId=\" + euc(thumbnailFieldName);\n                    }\n\n                    return url;\n                },\n\n                /**\n                 * Gets the upload url for a file field.\n                 *\n                 * @param {String} fieldName\n                 * The name of the file field.\n                 *\n                 * @param {String} fileUploadKey\n                 * A unique ID to identify this upload instance.\n                 *\n                 * @param {Boolean} useChunkingUrl\n                 * Whether or not to return a base url that can be used for breaking up a file into multiple smaller uploads.\n                 *\n                 * @return {String}\n                 */\n                getUploadFieldFileUrl: function (fieldName, fileUploadKey, useChunkingUrl) {\n\n                    var url;\n\n                    useChunkingUrl = useChunkingUrl || false;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"Upload/FileUpload.ashx?DBName=\" +\n                        euc(this.databaseName) +\n                        \"&FieldID=\" +\n                        euc(fieldName) +\n                        \"&FileUploadKey=\" +\n                        euc(fileUploadKey) +\n                        (useChunkingUrl === true ? \"\" : \"&InitialRequest=true\"));\n\n                    if (this.runAs) {\n                        url += \"&runAs=\" + euc(this.runAs);\n                    }\n\n                    return url;\n                },\n\n                /**\n                 */\n                createSearchListAddFormSession: function (dataFormSessionId,\n                    dataFormModelInstanceId,\n                    dataFormFieldName,\n                    searchFormSessionId,\n                    searchModelInstanceId,\n                    dataFormInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"searchListAddFormInvoke\", dataFormSessionId, dataFormModelInstanceId, dataFormFieldName) +\n                        \"&dataFormInstanceId=\" + euc(dataFormInstanceId) +\n                        \"&searchFormSessionId=\" + euc(searchFormSessionId) +\n                        \"&searchModelInstanceId=\" + euc(searchModelInstanceId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                createSearchListActionAddFormSession: function (dataFormSessionId,\n                    dataFormModelInstanceId,\n                    dataFormActionName,\n                    searchFormSessionId,\n                    searchModelInstanceId,\n                    dataFormInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"actionSearchListAddFormInvoke\", dataFormSessionId, dataFormModelInstanceId) +\n                        \"&actionId=\" + euc(dataFormActionName) +\n                        \"&dataFormInstanceId=\" + euc(dataFormInstanceId) +\n                        \"&searchFormSessionId=\" + euc(searchFormSessionId) +\n                        \"&searchModelInstanceId=\" + euc(searchModelInstanceId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmSearchListAddForm: function (formSessionId,\n                    modelInstanceId,\n                    fieldName,\n                    confirmFormSessionId,\n                    ignoreConcurrency) {\n\n                    var url = buildSvcBaseUrl(this, \"searchListAddFormConfirm\", formSessionId, modelInstanceId, fieldName) +\n                        \"&confirmFormSessionId=\" + euc(confirmFormSessionId) +\n                        \"&ignoreConcurrency=\" + euc(ignoreConcurrency);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmSearchListActionAddForm: function (formSessionId,\n                    modelInstanceId,\n                    actionName,\n                    confirmFormSessionId,\n                    ignoreConcurrency) {\n\n                    var url = buildSvcBaseUrl(this, \"actionSearchListAddFormConfirm\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" + euc(actionName) +\n                        \"&confirmFormSessionId=\" + euc(confirmFormSessionId) +\n                        \"&ignoreConcurrency=\" + euc(ignoreConcurrency);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmSearchListAddQuery: function (formSessionId, modelInstanceId, fieldName, queryInstanceId, selectionId) {\n                    var url = buildSvcBaseUrl(this, \"searchListAddQueryConfirm\", formSessionId, modelInstanceId) +\n                        \"&fieldId=\" +\n                        euc(fieldName) +\n                        \"&queryInstanceId=\" +\n                        euc(queryInstanceId) +\n                        \"&selectionId=\" +\n                        euc(selectionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmQueryAction: function (formSessionId, modelInstanceId, actionName, queryInstanceId, selectionId, queryType) {\n                    var url = buildSvcBaseUrl(this, \"confirmQueryAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" +\n                        euc(actionName) +\n                        \"&queryInstanceId=\" +\n                        euc(queryInstanceId) +\n                        \"&selectionId=\" +\n                        euc(selectionId) +\n                        \"&queryType=\" +\n                        euc(queryType);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmSearchListAddExportDefinition: function (formSessionId, modelInstanceId, fieldName, exportDefinitionId) {\n                    var url = buildSvcBaseUrl(this, \"searchListAddExportDefinitionConfirm\", formSessionId, modelInstanceId) +\n                        \"&fieldId=\" +\n                        euc(fieldName) +\n                        \"&exportDefinitionId=\" +\n                        euc(exportDefinitionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                confirmExportDefinitionAction: function (formSessionId, modelInstanceId, actionName, exportDefinitionId) {\n                    var url = buildSvcBaseUrl(this, \"confirmExportDefinitionAction\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" +\n                        euc(actionName) +\n                        \"&exportDefinitionId=\" +\n                        euc(exportDefinitionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Resets the values in the form instance.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the form instance.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the form model.\n                 *\n                 * @return {promise}\n                 */\n                resetFormSession: function (formSessionId, modelInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"resetFormSession\", formSessionId, modelInstanceId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Refreshes the form with the latest data.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the form instance.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the form model.\n                 *\n                 * @return {promise}\n                 */\n                refreshFormSession: function (formSessionId, modelInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"refreshFormSession\", formSessionId, modelInstanceId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Notifies the server that a duplicate record has been selected in the context of a form session instead of creating a new record.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session that contains the form instance.\n                 *\n                 * @param {String} modelInstanceId\n                 * The ID of the form model.\n                 *\n                 * @param {String} recordId\n                 * The ID of the duplicate record.\n                 *\n                 * @return {promise}\n                 */\n                selectDuplicateRecord: function (formSessionId, modelInstanceId, recordId) {\n\n                    var url = buildSvcBaseUrl(this, \"selectDuplicateRecord\", formSessionId, modelInstanceId) +\n                        \"&selectedRecordId=\" + euc(recordId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 * Starts a business process on the server with the information contained in the form session.\n                 *\n                 * @param {String} businessProcessId\n                 * The ID of the business process to start.\n                 *\n                 * @param {String} parameterSetId\n                 * The ID of the parameter set for the business process.\n                 *\n                 * @param {String} dataFormItemKey\n                 * The key of the data form item stored on the server.\n                 *\n                 * @param {Object} [options]\n                 * An object literal that may contain any of the following properties:\n                 *\n                 * @param {String} [options.businessProcessStatusId]\n                 *\n                 * @param {Object} [options.values]\n                 *\n                 * @return {promise}\n                 */\n                startBusinessProcess: function (businessProcessId, parameterSetId, dataFormItemKey, options) {\n\n                    var url,\n                        data,\n                        businessProcessStatusId;\n\n                    options = options || {};\n\n                    businessProcessStatusId = options.businessProcessStatusId;\n\n                    url = this.buildStartBusinessProcessUrl(businessProcessId, parameterSetId, dataFormItemKey, businessProcessStatusId);\n\n                    if (!dataFormItemKey && options.values) {\n                        data = {\n                            values: options.values\n                        };\n                    }\n\n                    return doPost(this, url, data);\n                },\n\n                /**\n                 */\n                selectDuplicateRecordAction: function (formSessionId, modelInstanceId, actionName, duplicateFormSessionId, recordId) {\n                    var url = buildSvcBaseUrl(this, \"selectDuplicateRecordAction\", formSessionId, modelInstanceId) +\n                        \"&duplicateFormSessionId=\" + euc(duplicateFormSessionId) +\n                        \"&actionId=\" + euc(actionName) +\n                        \"&selectedRecordId=\" + euc(recordId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                invokeRelationshipMapNodeAction: function (formSessionId, modelInstanceId, fieldId, nodeId, actionName) {\n                    var url = buildSvcBaseUrl(this, \"relationshipMapNodeInvokeAction\", formSessionId, modelInstanceId, fieldId) +\n                        \"&nodeId=\" + euc(nodeId) +\n                        \"&actionName=\" + euc(actionName);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                buildReportHostUrl: function (reportId, options) {\n                    var url;\n\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/ReportHost.aspx?databaseName=\") +\n                        euc(this.databaseName) +\n                        \"&reportId=\" +\n                        euc(reportId);\n\n                    options = options || {};\n\n                    if (options.historyId) {\n                        url += \"&historyId=\" + euc(options.historyId);\n                    }\n\n                    if (options.formSessionId) {\n                        url += \"&formSessionId=\" + euc(options.formSessionId);\n                    }\n\n                    if (options.modelInstanceId) {\n                        url += \"&modelInstanceId=\" + euc(options.modelInstanceId);\n                    }\n\n                    if (BBUI.is(options.showToolbar)) {\n                        url += \"&showToolbar=\" + euc(options.showToolbar);\n                    }\n\n                    if (BBUI.is(options.runAs)) {\n                        url += \"&runAs=\" + euc(options.runAs);\n                    }\n\n                    if (options.showParameterPrompts) {\n                        url += \"&showParameterPrompts=true\";\n                    }\n\n                    if (options.showPromptAreaButton) {\n                        url += \"&showPromptAreaButton=true\";\n                    }\n\n                    if (options.displayPromptArea) {\n                        url += \"&displayPromptArea=\" + euc(options.displayPromptArea);\n                    }\n\n                    url += BBUI.arrayToQueryString(options.parameters, \"p_\", true);\n\n                    return url;\n                },\n\n                /**\n                 * Performs validation on a form session.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session to validate.\n                 *\n                 * @return {promise}\n                 */\n                validateFormSession: function (formSessionId) {\n\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"validateformsession\", formSessionId);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                removeFromQueue: function (formSessionId, modelInstanceId, options) {\n                    var i,\n                        n,\n                        event,\n                        eventQueue,\n                        queue;\n\n                    if (!this._formSessionQueue) {\n                        return;\n                    }\n\n                    queue = this._formSessionQueue[formSessionId];\n\n                    if (queue && queue.eventQueue && queue.eventQueue.length) {\n                        eventQueue = queue.eventQueue;\n                        for (i = 0, n = eventQueue.length; i < n; ++i) {\n                            // find the url connection string in this entity, and attempt match. It is always at [2]\n                            event = eventQueue[i][2].toLowerCase();\n\n                            if (!(options.action && event.indexOf(options.action.toLowerCase()) === -1) &&\n                                    !(options.fieldName && event.indexOf(options.fieldName.toLowerCase()) === -1)) {\n                                eventQueue.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * returns dataform item for a given form session and model instance.\n                 *\n                 * @param {String} formSessionId\n                 * The ID of the form session to validate.\n                 *\n                 * @param {String} modelInstanceId\n                 *\n                 * @return {promise}\n                 */\n                getFormSessionDataFormItemXml: function (formSessionId, modelInstanceId) {\n\n                    var url = buildSvcBaseUrl(this, \"getFormSessionDataFormItemXml\", formSessionId, modelInstanceId);\n\n                    return doGet(this, url);\n                },\n\n                /**\n                 */\n                reportActionFormSaved: function (formSessionId, modelInstanceId, actionName) {\n\n                    var url = buildSvcBaseUrl(this, \"reportActionFormSaved\", formSessionId, modelInstanceId) +\n                        \"&actionId=\" + euc(actionName);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                clearParameterDetail: function (formSessionId, modelInstanceId, parameterDetailName) {\n                    var url;\n\n                    url = buildSvcBaseUrl(this, \"clearParameterDetail\") +\n                        \"&formSessionId=\" + euc(formSessionId) +\n                        \"&modelInstanceId=\" + euc(modelInstanceId) +\n                        \"&parameterDetailName=\" + euc(parameterDetailName);\n\n                    return doPost(this, url, null);\n                },\n\n                /**\n                 */\n                cancelAsyncOperation: function (cancelId) {\n\n                    var url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingCancelAsyncOperation.ashx?databaseName=\") +\n                        euc(this.databaseName) +\n                        \"&cancelId=\" +\n                        euc(cancelId);\n\n                    return doGet(this, url);\n                }\n            };\n\n            /**\n             * @class bbui.uimodelingservice.bbuiUIModelingService\n             *\n             */\n            return {\n                /**\n                 * Create an instance of the UIModeling service.\n                 *\n                 * @param {String} [baseUrl=bbuiUIModelingServiceConfig.baseUrl]\n                 *\n                 * @param {String} [databaseName=bbuiUIModelingServiceConfig.databaseName]\n                 *\n                 * @param {Object} [options]\n                 *\n                 * @param {Object} options.runAs\n                 *\n                 * @param {Object} options.onRequestBegin\n                 *\n                 * @param {Object} options.onRequestEnd\n                 *\n                 * @param {Object} options.httpHeaders\n                 *\n                 * @param {Object} options.useEventQueue\n                 *\n                 * @return {bbui.uimodelingservice.bbuiUIModelingService.Service}\n                 * @return {Object} return.http\n                 * $http TODO this property is referenced via `$http`, not `http`. Need to get docs to render properly.\n                 */\n                create: function (baseUrl, databaseName, options) {\n                    var svc;\n\n                    baseUrl = baseUrl || bbuiUIModelingServiceConfig.baseUrl;\n                    databaseName = databaseName || bbuiUIModelingServiceConfig.databaseName;\n\n                    if (baseUrl === null || !databaseName) {\n                        throw new Error('You must either provide a baseUrl and databaseName as parameters or set them globally using bbuiShellServiceConfig.');\n                    }\n\n                    svc = new Service(baseUrl, databaseName, options);\n                    svc.$http = $http;\n\n                    return svc;\n                }\n            };\n        }]);\n\n}(this));\n"
  ]
}