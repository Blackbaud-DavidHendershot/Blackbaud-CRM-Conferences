// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BBConTests.Features
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IndividualConstituent")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IndividualConstituentFeature : BaseTest
    {
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IndividualConstituent.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IndividualConstituent", "In order to record information about alumni and supporters\r\nAs a BBCRM user\r\nI wa" +
                    "nt to add a new Individual constituent to the database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "IndividualConstituent")))
            {
                BBConTests.Features.IndividualConstituentFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check the ability to add new Individual Constituent record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check the ability to add new Individual Constituent record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndividualConstituent")]
        [NUnit.Framework.CategoryAttribute("aaa_Demo")]
        [NUnit.Framework.CategoryAttribute("IndividualConstituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("aaa_Demo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("IndividualConstituent")]
        public virtual void CheckTheAbilityToAddNewIndividualConstituentRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check the ability to add new Individual Constituent record", new string[] {
                        "aaa_Demo",
                        "IndividualConstituent"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.When("I move to the constituent functional area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("there is a link to \"Add an individual\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("clicking on the link loads a dialog \"Add an individual\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new Individual Constituent record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a new Individual Constituent record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndividualConstituent")]
        [NUnit.Framework.CategoryAttribute("aaa_Demo")]
        [NUnit.Framework.CategoryAttribute("IndividualConstituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("aaa_Demo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("IndividualConstituent")]
        public virtual void AddANewIndividualConstituentRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new Individual Constituent record", new string[] {
                        "aaa_Demo",
                        "IndividualConstituent"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table1.AddRow(new string[] {
                        "Prospect",
                        "Bob",
                        "Mr.",
                        "Bobby",
                        "Other"});
#line 20
 testRunner.When("I add individual", ((string)(null)), table1, "When ");
#line 23
 testRunner.Then("constituent of type \"Individual\" is created named \"Bob Prospect\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add multiple new Individual Constituent records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add multiple new Individual Constituent records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndividualConstituent")]
        [NUnit.Framework.CategoryAttribute("aaa_Demo")]
        [NUnit.Framework.CategoryAttribute("IndividualConstituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("aaa_Demo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("IndividualConstituent")]
        public virtual void AddMultipleNewIndividualConstituentRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add multiple new Individual Constituent records", new string[] {
                        "aaa_Demo",
                        "IndividualConstituent"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table2.AddRow(new string[] {
                        "Prospect",
                        "Bob",
                        "Mr.",
                        "Bobby",
                        "Other"});
            table2.AddRow(new string[] {
                        "Prospect",
                        "William",
                        "Mr.",
                        "Billy",
                        "Other"});
#line 30
 testRunner.When("I add individual", ((string)(null)), table2, "When ");
#line 34
 testRunner.Then("constituent of type \"Individual\" is created named \"Bob Prospect\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.And("constituent of type \"Individual\" is created named \"William Prospect\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Individual Constituent record with address")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Individual Constituent record with address")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndividualConstituent")]
        [NUnit.Framework.CategoryAttribute("aaa_Demo")]
        [NUnit.Framework.CategoryAttribute("IndividualConstituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("aaa_Demo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("IndividualConstituent")]
        public virtual void AddIndividualConstituentRecordWithAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Individual Constituent record with address", new string[] {
                        "aaa_Demo",
                        "IndividualConstituent"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source",
                        "Address type",
                        "Country",
                        "Address",
                        "City",
                        "State",
                        "ZIP"});
            table3.AddRow(new string[] {
                        "Prospect",
                        "William",
                        "Mr.",
                        "Billy",
                        "Other",
                        "Home",
                        "United States",
                        "Test",
                        "SomeCity",
                        "PA",
                        "19147"});
#line 42
 testRunner.When("I add individual with address", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Address type",
                        "Address",
                        "City",
                        "State",
                        "ZIP",
                        "Country"});
            table4.AddRow(new string[] {
                        "Home - Main",
                        "Test",
                        "SomeCity",
                        "PA",
                        "19147",
                        "United States"});
#line 45
 testRunner.Then("constituent of type \"Individual\" is created named \"William Prospect\" with address" +
                    "", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
